{"sample_id": "a5ae1249-7f33-4d40-8ad1-914a0623e3bd", "input": "The population of a town is 10000. It decreases annually at the rate of 20% p.a. What will be its population after 2 years?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 20, "arg_1": 100}}, {"name": "multiply", "label": "$var_2", "arguments": {"arg_0": 10000, "arg_1": "$var_1.result$"}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 10000, "arg_1": "$var_2.result$"}}, {"name": "divide", "label": "$var_4", "arguments": {"arg_0": 20, "arg_1": 100}}, {"name": "multiply", "label": "$var_5", "arguments": {"arg_0": 10000, "arg_1": "$var_4.result$"}}, {"name": "subtract", "label": "$var_6", "arguments": {"arg_0": 10000, "arg_1": "$var_5.result$"}}, {"name": "divide", "label": "$var_7", "arguments": {"arg_0": 20, "arg_1": 100}}, {"name": "multiply", "label": "$var_8", "arguments": {"arg_0": "$var_6.result$", "arg_1": "$var_7.result$"}}, {"name": "subtract", "label": "$var_9", "arguments": {"arg_0": "$var_3.result$", "arg_1": "$var_8.result$"}}], "tools": [{"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}, {"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}], "gold_answer": 6400.0}
{"sample_id": "fa57c28a-e9d8-44fb-a358-a9404a557d5b", "input": "Get the text content of the URL 'https://www.example.com', then count the occurrence of the word 'the' in the text content.", "output": [{"name": "get_url_content", "arguments": {"url": "https://www.example.com"}, "label": "$var1"}, {"name": "count_the_word", "arguments": {"string": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Counts the occurrence of the word \"the\" in a given string.", "name": "count_the_word", "output_parameters": {"properties": {"output_0": {"description": "A list of integers. The first integer is the index of the word \"the\" in the string.\n    The second integer is the number of times the word \"the\" occurs. The third integer\n    is the number of times the word \"the\" repeats itself in the string.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the maximum score from a JSON file representing a game's scores.", "name": "get_maximum_score", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"json_file_path": {"description": "The path to the JSON file.", "type": "string"}}, "required": ["json_file_path"], "type": "object"}}, {"description": "Rearranges a date string into the format \"yyyy/mm/dd\".", "name": "rearrange_date_string", "output_parameters": {"properties": {"output_0": {"description": "A string representing the date in the format \"yyyy/mm/dd\", or None if the input string is not a valid date.", "type": "string"}}}, "parameters": {"properties": {"date_string": {"description": "A string representing a date in the format \"yyyy/mm/dd\".", "type": "string"}}, "required": ["date_string"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Generates a dictionary with `length` number of keys and their corresponding values.\nThe values for each key are a concatenation of the key and its numeric value.", "name": "generate_iterative_dictionary", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the generated keys and their corresponding values.", "type": "object"}}}, "parameters": {"properties": {"length": {"description": "The number of keys to generate in the dictionary.", "type": "integer"}}, "required": ["length"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Extracts the license type from a given license text string using regular expressions.", "name": "extract_license_type", "output_parameters": {"properties": {"output_0": {"description": "A string containing the license type (for example, \"GPLv3\") if found,\n    otherwise an empty string.", "type": "string"}}}, "parameters": {"properties": {"license_text": {"description": "The license text string to parse.", "type": "string"}}, "required": ["license_text"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string of a chemical formula and returns a tuple of the parsed charge and multiplicity.", "name": "parse_chemical_formula", "output_parameters": {"properties": {"output_0": {"description": "A tuple of the multiplicity and charge.", "type": "array"}}}, "parameters": {"properties": {"formula": {"description": "The string of the chemical formula following the format of `name(m, c)`, where `name` is the name of the chemical, `m` is the multiplicity, and `c` is the charge.", "type": "string"}}, "required": ["formula"], "type": "object"}}, {"description": "Finds the word with the highest frequency in a dictionary.\nIf two or more words have the same frequency, returns the word that comes first alphabetically.\nIf the frequency is zero, returns an empty string.", "name": "find_max_word_frequency", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"word_frequency_map": {"additionalProperties": {"type": "integer"}, "description": "A dictionary where keys are words and values are their frequencies.", "type": "object"}}, "required": ["word_frequency_map"], "type": "object"}}, {"description": "Generates a DRS URI for accessing an object on the DRS server.", "name": "generate_drs_uri", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"obj_id": {"description": "The object ID.", "nullable": true, "type": "string"}}, "required": ["obj_id"], "type": "object"}}, {"description": "Extracts unique words from a sentence and outputs them in a human-readable format.\n\nIf an empty string is passed to the function, it returns a string containing only the message \"No words found.\".", "name": "extract_unique_words", "output_parameters": {"properties": {"output_0": {"description": "A string containing the unique words from the input sentence, separated by commas and spaces.", "type": "string"}}}, "parameters": {"properties": {"sentence": {"description": "The input sentence.", "type": "string"}}, "required": ["sentence"], "type": "object"}}, {"description": "Merges two Python dictionaries recursively.", "name": "merge_two_dicts", "output_parameters": {"properties": {"output_0": {"description": "A new dictionary that contains the combined contents of `dict1` and `dict2`.", "type": "object"}}}, "parameters": {"properties": {"dict1": {"description": "The first dictionary to merge.", "type": "object"}, "dict2": {"description": "The second dictionary to merge.", "type": "object"}}, "required": ["dict1", "dict2"], "type": "object"}}, {"description": "Checks if two lists have the same elements without duplicates.", "name": "check_duplicates", "output_parameters": {"properties": {"output_0": {"description": "A boolean value indicating whether the two lists have the same elements without duplicates.", "type": "boolean"}}}, "parameters": {"properties": {"list_one": {"description": "The first list.", "items": {"type": "string"}, "type": "array"}, "list_two": {"description": "The second list.", "items": {"type": "string"}, "type": "array"}}, "required": ["list_one", "list_two"], "type": "object"}}, {"description": "Converts a distance from kilometers to miles.", "name": "kilometers_to_miles", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"kilometers": {"description": "The distance in kilometers.", "type": ["integer", "number"]}}, "required": ["kilometers"], "type": "object"}}, {"description": "Gets the text content of a URL's page.", "name": "get_url_content", "output_parameters": {"properties": {"output_0": {"description": "The text content of the URL's page.", "type": "string"}}}, "parameters": {"properties": {"url": {"description": "The URL to get the text content from.", "type": "string"}}, "required": ["url"], "type": "object"}}], "gold_answer": [-1, 0, 0]}
{"sample_id": "4c457bfb-c6e5-48ce-890d-b6ac4b2f307b", "input": "A certain list consists of 21 different numbers. If n is in the list and n is 4 times the average(arithmetic mean) of the other 20 numbers in the list, then n is what fraction Q of the sum of the 21 numbers in the list?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 1, "arg_1": 1}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": 20, "arg_1": 4}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 21}}, {"name": "divide", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 4}}, {"name": "multiply", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 2}}, {"name": "subtract", "label": "$var_6", "arguments": {"arg_0": "$var_5.result$", "arg_1": 4}}, {"name": "subtract", "label": "$var_7", "arguments": {"arg_0": "$var_6.result$", "arg_1": 3}}, {"name": "divide", "label": "$var_8", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_7.result$"}}], "tools": [{"name": "rectangle_perimeter", "description": "Calculate the perimeter of a rectangle", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle perimeter", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}], "gold_answer": 0.16666666666666666}
{"sample_id": "6ae58ffa-f086-4aa5-9bc9-e2beeec685cc", "input": "The equation of line a is y = 4/3*x - 100. What is the smallest possible distance in the xy-plane from the point with coordinates (0, 0) to any point on line a?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 100, "arg_1": 3}}, {"name": "power", "label": "$var_2", "arguments": {"arg_0": 4, "arg_1": 2}}, {"name": "power", "label": "$var_3", "arguments": {"arg_0": 3, "arg_1": 2}}, {"name": "add", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}, {"name": "sqrt", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$"}}, {"name": "divide", "label": "$var_6", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_5.result$"}}], "tools": [{"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "surface_cube", "description": "Calculate the surface area of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cube", "type": "float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "floor", "description": "Return the largest integer less than or equal to x.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the flooring result", "type": "int"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}], "gold_answer": 60.0}
{"sample_id": "ac7f18f4-b4e7-424c-bb4e-b81a8a7e507c", "input": "The sum of all the integers k such that –21 < k < 24 is", "output": [{"name": "negate", "label": "$var_1", "arguments": {"arg_0": 21}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 1}}, {"name": "negate", "label": "$var_3", "arguments": {"arg_0": 21}}, {"name": "add", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 1}}, {"name": "add", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 1}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_5.result$"}}], "tools": [{"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "permutation", "description": "Calculate the number of permutations of n items taken r at a time", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being arranged", "type": "int"}}, "output_parameter": {"result": {"description": "Number of permutations", "type": "int"}}}, {"name": "rectangle_perimeter", "description": "Calculate the perimeter of a rectangle", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle perimeter", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}], "gold_answer": -39.0}
{"sample_id": "55927c49-9d82-41ca-8402-4272bac69678", "input": "Of 70 players on a football team, 43 are throwers. The rest of the team is divided so one third are left- handed and the rest are right handed. Assuming that all throwers are right handed, how many right- handed players are there total?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 1, "arg_1": 3}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 1, "arg_1": "$var_1.result$"}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 70, "arg_1": 43}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}, {"name": "add", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 43}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "square_edge_by_perimeter", "description": "Calculate the edge length of a square given its perimeter", "parameters": {"arg_0": {"description": "Perimeter of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "surface_sphere", "description": "Calculate the surface area of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the sphere", "type": "float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}], "gold_answer": 61.0}
{"sample_id": "49c723a6-9995-4055-be20-60a97632d0d7", "input": "I want to find the maximum distance of any point on the line with slope 3 and y-intercept 2 from the x-axis, and then convert this distance to dBm.", "output": [{"name": "max_dist_from_x_axis", "arguments": {"m": 3, "b": 2}, "label": "$var1"}, {"name": "convert_metric_to_dbm", "arguments": {"metric": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Check if an input string contains only alphanumeric characters.", "name": "string_is_alphanumeric", "output_parameters": {"properties": {"output_0": {"description": "True if the string contains only alphanumeric characters, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to check.", "type": "object"}}, "required": ["input_string"], "type": "object"}}, {"description": "Calculates the smallest power of 2 greater than or equal to a given number n.", "name": "best_round", "output_parameters": {"properties": {"output_0": {"description": "The smallest power of 2 greater than or equal to n.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "The given number.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Escapes a string with Unicode escaping.", "name": "escape_string", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"s": {"description": "The input string.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Checks whether a given dictionary contains a nested dictionary with a given key.", "name": "check_nested_dict", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"default": {"description": "The value to return if the key is not found.", "type": "boolean"}, "dict_obj": {"additionalProperties": {}, "description": "The dictionary to check.", "type": "object"}, "key": {"description": "The key to search for.", "type": "string"}}, "required": ["dict_obj", "key"], "type": "object"}}, {"description": "Calculates the maximum distance of any point on the line from the x-axis.", "name": "max_dist_from_x_axis", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"b": {"description": "The y-intercept of the line.", "type": "number"}, "m": {"description": "The slope of the line.", "type": ["number", "string"]}}, "required": ["m", "b"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Returns the zero-based index of the rightmost set bit in binary representation of `n`.\nIf `n` is zero, then the function returns `-1`.", "name": "bit_to_index", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "A 32-bit integer value.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Detects an event in a list of state transitions.\n\nAn event is defined as a state transition from state 0 to state 1 and back to state 0.", "name": "detect_event", "output_parameters": {"properties": {"output_0": {"description": "True if an event is detected, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"state_transitions": {"description": "A list of state transitions.", "items": {"type": "integer"}, "type": "array"}}, "required": ["state_transitions"], "type": "object"}}, {"description": "Converts a signal strength value from a given metric to dBm (decibel-milliwatts).", "name": "convert_metric_to_dbm", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"metric": {"description": "The signal strength value in an arbitrary metric.", "type": "number"}}, "required": ["metric"], "type": "object"}}, {"description": "Returns a color for the given value.\nIf the value is positive, the function returns the string 'red'.\nIf the value is negative, the function returns the string 'green'.\nIf the value is equal to 0, the function returns the string 'blue'.\nOtherwise, the function returns the default value.", "name": "color_value", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"default": {"description": "The default color to return if the value does not match any of the conditions.", "type": "string"}, "value": {"description": "The value to determine the color for.", "type": ["integer", "number"]}}, "required": ["value", "default"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Sorts a list of tuples based on their combined lengths.\n\nEach tuple has two string elements, and the combined length of a tuple is the sum of the lengths of its two string elements. The sorting is done first by the length of the first element in each tuple, then by the length of the second element.", "name": "sort_by_combined_length", "output_parameters": {"properties": {"output_0": {"description": "A sorted list of tuples.", "type": "array"}}}, "parameters": {"properties": {"tuples": {"description": "A list of tuples, where each tuple has two string elements.", "items": {"prefixItems": [{"type": "string"}, {"type": "string"}], "type": "array"}, "type": "array"}}, "required": ["tuples"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Counts the number of objects in `objects` that have an attribute named `attribute`.", "name": "count_object_attributes", "output_parameters": {"properties": {"output_0": {"description": "The number of objects that have the attribute.", "type": "integer"}}}, "parameters": {"properties": {"attribute": {"description": "The name of the attribute to check for.", "type": "string"}, "objects": {"description": "A list of objects to check for the attribute.", "items": {}, "type": "array"}}, "required": ["objects", "attribute"], "type": "object"}}, {"description": "Converts a multi-line string to a single-line string with a space separator.", "name": "convert_to_single_line", "output_parameters": {"properties": {"output_0": {"description": "The converted single-line string.", "type": "string"}}}, "parameters": {"properties": {"text": {"description": "The input multi-line string.", "type": "string"}}, "required": ["text"], "type": "object"}}], "gold_answer": -1.7609125905568126}
{"sample_id": "80d3d81b-e6fd-4fa4-a690-b7214c4ef41c", "input": "There are 4 people of different heights standing in order of increasing height. The difference is 2 inches between the first person and the second person, and also between the second person and the third person. The difference between the third person and the fourth person is 6 inches and the average height is 75. How tall is the fourth person?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 75, "arg_1": 4}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": 4, "arg_1": 6}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": 6, "arg_1": "$var_2.result$"}}, {"name": "subtract", "label": "$var_4", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_3.result$"}}, {"name": "divide", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 4}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": 4, "arg_1": 6}}, {"name": "add", "label": "$var_7", "arguments": {"arg_0": "$var_5.result$", "arg_1": "$var_6.result$"}}], "tools": [{"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "remainder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "floor", "description": "Return the largest integer less than or equal to x.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the flooring result", "type": "int"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}], "gold_answer": 81.0}
{"sample_id": "e2d15e8e-2f65-4928-aa14-85edc07ff784", "input": "in a certain game , a large container is filled with red , yellow , green , and blue beads worth , respectively , 7 , 5 , 3 , and 2 points each . a number of beads are then removed from the container . if the product of the point values of the removed beads is 30 , 870000 , how many red beads were removed ?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 3, "arg_1": 1}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 1}}], "tools": [{"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "surface_cylinder", "description": "Calculate the surface area of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cylinder", "type": "float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 3.0}
{"sample_id": "dd1d9598-04c5-4abe-9520-6b6be4b916ae", "input": "Calculate the length of the longest substring that contains no duplicate characters in the string 'abcabcbb'. Then, check if the resulting number is equal to 3 within an absolute tolerance of 0.01 and a relative tolerance of 0.01.", "output": [{"name": "longest_substring_no_duplicates", "arguments": {"s": "abcabcbb"}, "label": "$var1"}, {"name": "equal_within_tolerance", "arguments": {"x": "$var1.output_0$", "y": 3, "abs_tol": 0.01, "rel_tol": 0.01}, "label": "$var2"}], "tools": [{"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Calculates the length of the longest substring that contains no duplicate characters.", "name": "longest_substring_no_duplicates", "output_parameters": {"properties": {"output_0": {"description": "The length of the longest substring that contains no duplicate characters.", "type": "integer"}}}, "parameters": {"properties": {"s": {"description": "The input string.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns the name of the caller of the function.", "name": "caller_name", "output_parameters": {"properties": {"output_0": {"description": "The name of the caller function.", "type": "string"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Returns a string that represents the number of occurrences of each character from s1 in s2.\nIf the character from s1 is not found in s2, the function returns a string with the character from s1 followed by 0.", "name": "count_chars_in_string", "output_parameters": {"properties": {"output_0": {"description": "A string with the character from s1 followed by the number of occurrences in s2.", "type": "string"}}}, "parameters": {"properties": {"s1": {"description": "A string containing the characters to count in s2.", "type": "string"}, "s2": {"description": "A string containing the characters to search for.", "type": "string"}}, "required": ["s1", "s2"], "type": "object"}}, {"description": "Checks if all elements in the list are the same.", "name": "all_same", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"lst": {"description": "The input list.", "items": {"type": ["integer", "number", "string"]}, "type": "array"}}, "required": ["lst"], "type": "object"}}, {"description": "Checks whether the request method is in the allowed methods list.", "name": "request_allowed", "output_parameters": {"properties": {"output_0": {"description": "True if the request method is in the allowed methods list, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"allowed_methods": {"description": "The list of allowed methods.", "items": {"type": "string"}, "type": "array"}, "request": {"description": "The request object.", "type": "object"}}, "required": ["request", "allowed_methods"], "type": "object"}}, {"description": "Converts a color string (RGB in hexadecimal) to a 24-bit integer represented in hexadecimal format with 6 digits.", "name": "color_string_to_int", "output_parameters": {"properties": {"output_0": {"description": "The 24-bit integer represented in hexadecimal format with 6 digits.", "type": "string"}}}, "parameters": {"properties": {"color_string": {"description": "The color string in hexadecimal format.", "type": "string"}}, "required": ["color_string"], "type": "object"}}, {"description": "Returns a list of the values at the indices where is_odd is True.", "name": "select_odd_values", "output_parameters": {"properties": {"output_0": {"description": "A list of the values at the indices where is_odd is True.", "type": "array"}}}, "parameters": {"properties": {"triples": {"description": "A list of triples of the form (index, value, is_odd), where index and value are integers and is_odd is a boolean.", "items": {"prefixItems": [{"type": "integer"}, {"type": "integer"}, {"type": "boolean"}], "type": "array"}, "type": "array"}}, "required": ["triples"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Extracts domain names from a list of URLs.", "name": "extract_domain_names", "output_parameters": {"properties": {"output_0": {"description": "A list of domain names.", "type": "array"}}}, "parameters": {"properties": {"urls": {"description": "A list of URLs.", "items": {"type": "string"}, "type": "array"}}, "required": ["urls"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Calculates the sum of the numbers in a list of tuples.", "name": "broken_sum", "output_parameters": {"properties": {"output_0": {"description": "The sum of the numbers in the tuple.", "type": "integer"}}}, "parameters": {"properties": {"list_of_tuples": {"description": "A list of tuples where each tuple has two elements representing a number and its square.", "items": {"prefixItems": [{"type": "integer"}, {"type": "integer"}], "type": "array"}, "type": "array"}}, "required": ["list_of_tuples"], "type": "object"}}, {"description": "Validates if all characters in a string are ASCII characters.", "name": "validate_ascii", "output_parameters": {"properties": {"output_0": {"description": "True if all characters are ASCII characters, otherwise False.", "type": "boolean"}}}, "parameters": {"properties": {"string": {"description": "The input string to validate.", "type": "object"}}, "required": ["string"], "type": "object"}}, {"description": "Reads a binary file and converts it to a byte array.", "name": "binary_file_to_byte_array", "output_parameters": {"properties": {"output_0": {"description": "A NumPy array containing the byte data from the binary file.", "type": "object"}}}, "parameters": {"properties": {"file_path": {"description": "The path to the binary file.", "type": "string"}}, "required": ["file_path"], "type": "object"}}, {"description": "Checks whether two numbers are equal within a given absolute and relative tolerance.", "name": "equal_within_tolerance", "output_parameters": {"properties": {"output_0": {"description": "True if the numbers are equal within the given tolerances, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"abs_tol": {"description": "The maximum acceptable absolute difference between the numbers.", "type": "number"}, "rel_tol": {"description": "The maximum acceptable relative difference between the numbers.", "type": "number"}, "x": {"description": "The first number.", "type": ["integer", "number"]}, "y": {"description": "The second number.", "type": ["integer", "number"]}}, "required": ["x", "y", "abs_tol", "rel_tol"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}], "gold_answer": true}
{"sample_id": "b85f618a-386d-4bbd-ba60-7f6ce29e52fe", "input": "Parse the CSS property 'color: red' and replace all nested empty dictionaries with the string \"Empty\" in the resulting dictionary.", "output": [{"name": "parse_css_property", "arguments": {"css_property": "color: red"}, "label": "$var1"}, {"name": "replace_nested_empty_dicts", "arguments": {"d": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Fills a template with values from a dictionary using regular expressions.", "name": "template_fill", "output_parameters": {"properties": {"output_0": {"description": "The filled template as a string.", "type": "string"}}}, "parameters": {"properties": {"kwargs": {"additionalProperties": {"type": "string"}, "description": "A dictionary of keyword arguments.", "type": "object"}, "template": {"description": "A string representing a template with placeholders.", "type": "string"}}, "required": ["template", "kwargs"], "type": "object"}}, {"description": "Returns the output corresponding to the given input based on the input-output pairs.\nIf the input is not present in the input-output pairs, returns None.", "name": "get_output", "output_parameters": {"properties": {"output_0": {"description": "The output corresponding to the input, or None if the input is not present in the input-output pairs.", "type": "integer"}}}, "parameters": {"properties": {"input": {"description": "The input for which the output is to be determined.", "type": "integer"}}, "required": ["input"], "type": "object"}}, {"description": "Applies a function to the values of a dictionary based on a mapping of keys.", "name": "compose_func_map", "output_parameters": {"properties": {"output_0": {"description": "A new dictionary with the new values mapped to the original keys.", "type": "object"}}}, "parameters": {"properties": {"func": {"description": "The function to be applied.", "type": "object"}, "key_map": {"additionalProperties": {}, "description": "A dictionary mapping keys to other keys.", "type": "object"}}, "required": ["func", "key_map"], "type": "object"}}, {"description": "Returns a string representation of the specified attribute values for a list of objects.", "name": "get_attr_str", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"attr": {"description": "The name of the attribute to retrieve.", "type": "string"}, "objects": {"description": "A list of objects.", "items": {}, "type": "array"}}, "required": ["objects", "attr"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the largest integer that is less than or equal to `n` and divisible by 10.", "name": "largest_10_divisor", "output_parameters": {"properties": {"output_0": {"description": "The largest integer that is less than or equal to `n` and divisible by 10.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "The input integer.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Creates a list of all sub-lists of size 5 that can be formed from the given list.", "name": "sublists_of_size5", "output_parameters": {"properties": {"output_0": {"description": "A list of sub-lists of size 5.", "type": "array"}}}, "parameters": {"properties": {"lst": {"description": "The input list.", "items": {"type": "string"}, "type": "array"}}, "required": ["lst"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Parses a CSS property from a string and returns a dictionary with the property name and value.", "name": "parse_css_property", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the property name as the key and value as the value.", "type": "object"}}}, "parameters": {"properties": {"css_property": {"description": "A string containing a CSS property and value separated by a colon.", "type": "string"}}, "required": ["css_property"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string containing Unicode characters and returns a list of their corresponding bytes.\nThe function supports parsing \"raw\" Unicode strings (prefixed with `u`) or UTF-8 encoded strings (prefixed with `b`).\nIt handles the conversion of Unicode characters with no direct UTF-8 encoding.\nList comprehension is used to construct the list of bytes from the Unicode string.", "name": "parse_unicode", "output_parameters": {"properties": {"output_0": {"description": "A list of bytes representing the Unicode characters in the input string.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string containing Unicode characters.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Generates a string of n random digits.", "name": "generate_random_digits", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"n": {"description": "The number of digits to generate.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Computes the slope of a line that connects two points in a data set.", "name": "compute_slope", "output_parameters": {"properties": {"output_0": {"description": "The slope of the line connecting the first and last points in the data set.", "type": "number"}}}, "parameters": {"properties": {"data_set": {"description": "A list of x and y values representing the data set.", "items": {"prefixItems": [{"type": "number"}, {"type": "number"}], "type": "array"}, "type": "array"}}, "required": ["data_set"], "type": "object"}}, {"description": "Check if an input is a positive integer.", "name": "is_positive_int", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"x": {"description": "The input to check.", "type": ["integer", "number"]}}, "required": ["x"], "type": "object"}}, {"description": "Replaces all nested empty dictionaries with the string \"Empty\" in the original dictionary.", "name": "replace_nested_empty_dicts", "output_parameters": {"properties": {"output_0": {"description": "The modified dictionary.", "type": "object"}}}, "parameters": {"properties": {"d": {"description": "The input dictionary.", "type": "object"}}, "required": ["d"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Returns a list of all the words contained in the string.", "name": "words_from_string", "output_parameters": {"properties": {"output_0": {"description": "A list of words.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string containing words and whitespace characters.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Checks if the given string is empty. If the string is None, it is treated as an empty string.", "name": "is_empty_string", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"s": {"description": "The string to check.", "nullable": true, "type": "string"}}, "required": ["s"], "type": "object"}}], "gold_answer": {"color": "red"}}
{"sample_id": "66d08f5e-c50b-4e4a-b765-fbf9a8b14441", "input": "A basket contains 9 apples, of which 1 is spoiled and the rest are good. If we select 2 apples from the basket simultaneously and at random, what is the probability that the 2 apples selected will include the spoiled apple?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 9, "arg_1": 1}}, {"name": "choose", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 1}}, {"name": "choose", "label": "$var_3", "arguments": {"arg_0": 9, "arg_1": 2}}, {"name": "divide", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}], "tools": [{"name": "choose", "description": "Calculate the number of ways to choose r items from n items without repetition and without order", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being chosen", "type": "int"}}, "output_parameter": {"result": {"description": "Number of combinations", "type": "int"}}}, {"name": "surface_sphere", "description": "Calculate the surface area of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the sphere", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}, {"name": "square_area", "description": "Calculate the area of a square given its side", "parameters": {"arg_0": {"description": "The sequare side", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square area", "type": "int or float"}}}], "gold_answer": 0.2222222222222222}
{"sample_id": "e12393e3-a844-4a4d-86a4-f96487c61ca2", "input": "Calculate the number of unique substrings of length 3 in the string \"Hello, World!\". Then, round the result to 2 decimal places.", "output": [{"name": "count_unique_substrings", "arguments": {"s": "Hello, World!", "k": 3}, "label": "$var1"}, {"name": "round_num", "arguments": {"num": "$var1.output_0$", "decimal_places": 2}, "label": "$var2"}], "tools": [{"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Reads a text file, decodes it using the specified encoding, and returns the decoded content as a string.", "name": "read_and_decode_file", "output_parameters": {"properties": {"output_0": {"description": "The decoded content of the text file as a string. If the text file does not exist, an empty string is returned.", "type": "string"}}}, "parameters": {"properties": {"encoding": {"description": "The encoding scheme to use.", "type": "string"}, "filename": {"description": "The path to the text file.", "type": "string"}}, "required": ["filename", "encoding"], "type": "object"}}, {"description": "Converts a comma-separated string to a list of integers and appends them to bool_list.", "name": "convert_and_append", "output_parameters": {"properties": {"output_0": {"description": "A list of integers, where each integer is either 0 or 1 based on the corresponding\n    integer in the input string.", "type": "array"}}}, "parameters": {"properties": {"string_to_split": {"description": "A comma-separated string of integers.", "type": "string"}}, "required": ["string_to_split"], "type": "object"}}, {"description": "Converts a number in any string format to a float.", "name": "to_f", "output_parameters": {"properties": {"output_0": {"description": "The input number as a float, or None if the input string is not a valid number.", "type": "number"}}}, "parameters": {"properties": {"input_string": {"description": "The input string containing a number.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Computes the exponentiation of a complex number z to the power of n, where n is a positive integer.\nEmploys the built-in functions math.cos() and math.sinh() for complex number handling.\nUtilizes list comprehension to handle negative powers.", "name": "complex_exponentiation", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"n": {"description": "The power to which the complex number is to be raised.", "type": "integer"}, "z": {"description": "The complex number to be exponentiated.", "type": "object"}}, "required": ["z", "n"], "type": "object"}}, {"description": "Calculates the sum of the first and last elements of a list of integers.\nIf the list is empty, returns 0. If the list contains only one element, returns it.", "name": "get_sum", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"my_list": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["my_list"], "type": "object"}}, {"description": "Returns the mean and variance of the list `nums`.\nIf `nums` is empty, returns `None`.", "name": "get_mean_and_variance", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"nums": {"description": "A list of numbers.", "items": {"type": "number"}, "type": "array"}}, "required": ["nums"], "type": "object"}}, {"description": "Calculates the number of unique substrings of length `k` in a given string `s`.\nAlso handles the case where the input string is `None`, `s` is empty, or `k` is greater than the length of the input string.", "name": "count_unique_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"k": {"description": "The length of the substrings to be considered.", "type": "integer"}, "s": {"description": "The input string.", "nullable": true, "type": "string"}}, "required": ["s", "k"], "type": "object"}}, {"description": "Formats a string to title case, removing leading and trailing spaces.", "name": "format_title_case", "output_parameters": {"properties": {"output_0": {"description": "The formatted string in title case.", "type": "string"}}}, "parameters": {"properties": {"text": {"description": "The input string to be formatted.", "type": "string"}}, "required": ["text"], "type": "object"}}, {"description": "Checks if an object has any private attributes.", "name": "has_private_attributes", "output_parameters": {"properties": {"output_0": {"description": "True if the object has any private attributes, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"obj": {"description": "The object to check."}}, "required": ["obj"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Extracts the size of an image specified in a PNG file's header.", "name": "get_image_size", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the width and height of the image.", "type": "object"}}}, "parameters": {"properties": {"png_file_path": {"description": "The path to the PNG file.", "type": "string"}}, "required": ["png_file_path"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns the element with the lowest lexicographical order from a list of lists.", "name": "get_minimum_by_lexicographical_order", "output_parameters": {"properties": {"output_0": {"description": "The element with the lowest lexicographical order, or None if the input list is empty or contains a non-list element.", "type": "integer"}}}, "parameters": {"properties": {"input_list": {"description": "A list of lists or strings.", "items": {"type": ["array", "string"]}, "type": "array"}}, "required": ["input_list"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Rounds a numeric value and returns a string representation.", "name": "round_num", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"decimal_places": {"description": "The number of decimal places to round to.", "type": "integer"}, "num": {"description": "The numeric value to be rounded.", "type": ["integer", "number"]}}, "required": ["num", "decimal_places"], "type": "object"}}], "gold_answer": "11.00"}
{"sample_id": "ff00596a-5d15-4536-b2c1-4617f366d1ff", "input": "The measurement of a rectangular box with lid is 25cmx6cmx18cm. Find the volume of the largest sphere that can be inscribed in the box (in terms of πcm3). (Hint: The lowest measure of rectangular box represents the diameter of the largest sphere)", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 4, "arg_1": 3}}, {"name": "power", "label": "$var_2", "arguments": {"arg_0": 3, "arg_1": 3}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}], "tools": [{"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "square_area", "description": "Calculate the area of a square given its side", "parameters": {"arg_0": {"description": "The sequare side", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square area", "type": "int or float"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}, {"name": "min_number", "description": "Find the minimum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Minimum value", "type": "float"}}}], "gold_answer": 36.0}
{"sample_id": "db663e22-21eb-424f-a826-af28045b196a", "input": "5 years ago , the average age of a and b was 15 years . average age of a , b and c today is 20 years . how old will c be after 14 years ?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 20, "arg_1": 3}}, {"name": "multiply", "label": "$var_2", "arguments": {"arg_0": 15, "arg_1": 2}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 5}}, {"name": "add", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 5}}, {"name": "subtract", "label": "$var_5", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_4.result$"}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": "$var_5.result$", "arg_1": 14}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 34.0}
{"sample_id": "56eb03c3-57cd-457a-8589-09f1a5bb238f", "input": "Gold is 19 times as heavy as water and copper is 9 times as heavy as water. In what ratio should these be mixed to get an alloy 13 times as heavy as water?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 13, "arg_1": 9}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 19, "arg_1": 13}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}], "tools": [{"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "rectangle_perimeter", "description": "Calculate the perimeter of a rectangle", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle perimeter", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}], "gold_answer": 0.6666666666666666}
{"sample_id": "ff0029de-3456-487f-a569-301ff13b2a3b", "input": "A can run 288 metre in 28 seconds and B in 32 seconds. By what distance A beat B?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 288, "arg_1": 32}}, {"name": "multiply", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 28}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 288, "arg_1": "$var_2.result$"}}], "tools": [{"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "choose", "description": "Calculate the number of ways to choose r items from n items without repetition and without order", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being chosen", "type": "int"}}, "output_parameter": {"result": {"description": "Number of combinations", "type": "int"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}], "gold_answer": 36.0}
{"sample_id": "5afe9528-2b80-4d14-9537-fcb831d3ed08", "input": "Given a table name string in the format /database_name/schema_name/table_name, extract the table name and then remove any extra whitespaces from it.", "output": [{"name": "extract_table_name", "arguments": {"table_name": "/database_name/schema_name/table_name"}, "label": "$var1"}, {"name": "remove_extra_whitespaces", "arguments": {"text": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Converts an integer to its byte representation.", "name": "integer_to_bytes", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"byteorder": {"description": "The byte order of the resulting byte array, either big-endian (default) or little-endian.", "type": "string"}, "integer": {"description": "The integer to convert.", "type": "integer"}}, "required": ["integer"], "type": "object"}}, {"description": "Removes unnecessary whitespace from a string.\nSpecifically, this function removes any extra whitespace between words,\nas well as any leading or trailing whitespace at the beginning or end of the string.", "name": "remove_extra_whitespaces", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"text": {"description": "The input string.", "type": "object"}}, "required": ["text"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Calculates the volume of a sphere given its diameter.", "name": "get_volume_of_sphere_from_diameter", "output_parameters": {"properties": {"output_0": {"description": "The volume of the sphere as a float.", "type": "object"}}}, "parameters": {"properties": {"diameter": {"description": "The diameter of the sphere.", "type": "number"}}, "required": ["diameter"], "type": "object"}}, {"description": "Extracts and returns the table name from a given table name string.\n\nThe table name string must have a valid format of the following form:\n/database_name/schema_name/table_name", "name": "extract_table_name", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"table_name": {"description": "The table name string.", "type": ["object", "string"]}}, "required": ["table_name"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Checks if the given word starts with the given prefix.", "name": "starts_with_prefix", "output_parameters": {"properties": {"output_0": {"description": "True if the word starts with the prefix, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"prefix": {"description": "The prefix to check against.", "nullable": true, "type": "string"}, "word": {"description": "The word to check.", "nullable": true, "type": "string"}}, "required": ["word", "prefix"], "type": "object"}}, {"description": "Partitions a list of objects based on a specific attribute value.", "name": "partition_list_by_attribute_value", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing two lists. The first list contains all objects with the attribute value equal to the given value. The second list contains all objects with the attribute value not equal to the given value.", "type": "array"}}}, "parameters": {"properties": {"attribute": {"description": "The name of the attribute to use for partitioning.", "type": "string"}, "objects": {"description": "A list of objects to partition.", "items": {}, "type": "array"}, "value": {"description": "The value to use for partitioning."}}, "required": ["objects", "attribute", "value"], "type": "object"}}, {"description": "Creates a 3D tensor with the same values as `x` and the shape `(x.shape[0], x.shape[1], n)`.", "name": "make_3d", "output_parameters": {"properties": {"output_0": {"description": "The 3D tensor with the same values as `x` and the shape `(x.shape[0], x.shape[1], n)`.", "type": "object"}}}, "parameters": {"properties": {"n": {"description": "The integer to determine the third dimension of the output tensor.", "type": "integer"}, "x": {"description": "The input 2D tensor.", "type": "object"}}, "required": ["x", "n"], "type": "object"}}, {"description": "Extracts numeric values from a given input string.", "name": "extract_numeric_values", "output_parameters": {"properties": {"output_0": {"description": "A list of integers and floats representing the numeric values found in the input string.", "type": "array"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to extract numeric values from.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Prints a nicely-formatted error message to the user, outputting a string consisting of a message and a timestamp.\n\nThe message is in the format: 'ERROR: {timestamp}: {message}'. The timestamp is formatted as '%Y-%m-%d %H:%M:%S' using Python's datetime module, and the message is colored in bright red using ANSI escape codes.", "name": "print_error", "output_parameters": {"properties": {"output_0": {"description": "The formatted error message string.", "type": "string"}}}, "parameters": {"properties": {"message": {"description": "The error message to be displayed.", "type": "string"}}, "required": ["message"], "type": "object"}}, {"description": "Creates a dictionary from a CSV file, keeping track of the number of rows and skipping the remaining rows if there are more than 10 rows.", "name": "create_dictionary_from_csv", "output_parameters": {"properties": {"output_0": {"description": "A dictionary where each word is a key and its frequency is the corresponding value.", "type": "object"}}}, "parameters": {"properties": {"csv_file": {"description": "The path to the CSV file.", "type": "string"}}, "required": ["csv_file"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Fits a model to a sequence of points by applying a polynomial function.", "name": "fit_model", "output_parameters": {"properties": {"output_0": {"description": "The coefficients of the polynomial function.", "type": "array"}}}, "parameters": {"properties": {"x": {"description": "The x coordinates of the points.", "items": {"type": "number"}, "type": "array"}, "y": {"description": "The y coordinates of the points.", "items": {"type": "number"}, "type": "array"}}, "required": ["x", "y"], "type": "object"}}, {"description": "Changes the language code from \"en\" to \"de\" or \"fr\" based on the input.\nIf the input string starts with \"en\", change it to \"de\" and return the new string.\nIf the input string starts with \"de\" or \"fr\", change it to \"en\" and return the new string.\nIf the input string does not start with \"en\", \"de\", or \"fr\", raise a ValueError.", "name": "change_language_code", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to change the language code.", "type": "string"}}, "required": ["input_string"], "type": "object"}}], "gold_answer": "table_name"}
{"sample_id": "b549c0e2-fcb5-48a5-93aa-13d60f58159d", "input": "The weight of a glass of jar is 30% of the weight of the jar filled with coffee beans. After some of the beans have been removed, the weight of the jar and the remaining beans is 60% of the original total weight. What fraction part of the beans remain in the jar?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 60, "arg_1": 30}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 100, "arg_1": 30}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}], "tools": [{"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 0.42857142857142855}
{"sample_id": "e5907658-0492-404a-94c6-c1f705d9aeb9", "input": "Generate a list of even numbers from 2 to 100 using a list comprehension. Then, calculate the sum of the numbers in the list or the sum of the middle element and the average of the remaining elements if the list contains an odd number of elements.", "output": [{"name": "generate_even_numbers_list", "arguments": {}, "label": "$var1"}, {"name": "sum_or_average", "arguments": {"numbers": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Extracts the first line of a csv file that starts with the character 'c' (case-insensitive) and contains at least one comma.", "name": "extract_header", "output_parameters": {"properties": {"output_0": {"description": "A list of column names if a header line is found, otherwise an empty list.", "type": "array"}}}, "parameters": {"properties": {"csv_file": {"description": "The path to the csv file.", "type": "string"}}, "required": ["csv_file"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Generates a SHA256 checksum from a file path.", "name": "generate_sha256", "output_parameters": {"properties": {"output_0": {"description": "The SHA256 checksum as a string.", "type": "string"}}}, "parameters": {"properties": {"filepath": {"description": "The path to the file.", "type": "string"}}, "required": ["filepath"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Generates a list of even numbers from 2 to 100 using a list comprehension.", "name": "generate_even_numbers_list", "output_parameters": {"properties": {"output_0": {"description": "A list of even integers from 2 to 100.", "type": "array"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Checks if the first element of a tuple is greater than the second, and swaps them if true.", "name": "check_and_swap", "output_parameters": {"properties": {"output_0": {"description": "A tuple of two integers.", "type": "array"}}}, "parameters": {"properties": {"input_tuple": {"description": "A tuple of two integers.", "prefixItems": [{"type": "integer"}, {"type": "integer"}], "type": "array"}}, "required": ["input_tuple"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Adds two numbers with or without rounding, depending on the value of the `rounding` argument.", "name": "add_with_rounding", "output_parameters": {"properties": {"output_0": {"description": "The result of the addition as an integer.", "type": "integer"}}}, "parameters": {"properties": {"a": {"description": "The first number to add.", "type": ["integer", "number"]}, "b": {"description": "The second number to add.", "type": ["integer", "number"]}, "rounding": {"description": "If `True`, the result will be rounded to the nearest integer.", "type": "boolean"}}, "required": ["a", "b", "rounding"], "type": "object"}}, {"description": "Returns a list of text content from a list of objects that have a `get` method.", "name": "get_text_list", "output_parameters": {"properties": {"output_0": {"description": "A list of text content from the objects.", "type": "array"}}}, "parameters": {"properties": {"objects": {"description": "A list of objects that have a `get` method.", "items": {"type": "object"}, "type": "array"}}, "required": ["objects"], "type": "object"}}, {"description": "Converts a string to its equivalent string literal, with single quotes replaced by double quotes, and vice versa.", "name": "convert_to_string_literal", "output_parameters": {"properties": {"output_0": {"description": "The resulting string literal.", "type": "string"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to be converted.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Generates a list of metrics with timestamp, value, and unit attributes.", "name": "generate_metrics", "output_parameters": {"properties": {"output_0": {"description": "A list of objects (or dictionaries) with timestamp, value, and unit attributes.", "type": "array"}}}, "parameters": {"properties": {"input_list": {"description": "A list of objects (or dictionaries) with timestamp and value attributes.", "items": {"additionalProperties": {"type": "integer"}, "type": "object"}, "type": "array"}}, "required": ["input_list"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Walks through a given directory and returns all the file paths as a list, excluding files starting with an underscore (_).", "name": "walk_dir", "output_parameters": {"properties": {"output_0": {"description": "A list of file paths.", "type": "object"}}}, "parameters": {"properties": {"dir_path": {"description": "The directory to walk through.", "type": "string"}}, "required": ["dir_path"], "type": "object"}}, {"description": "Calculates the sum of the numbers in the list, but if the list contains an odd number of elements,\nthe function returns the sum of the middle element and the average of the remaining elements.", "name": "sum_or_average", "output_parameters": {"properties": {"output_0": {"description": "The sum of the numbers in the list or the sum of the middle element and the average of the remaining elements.", "type": "number"}}}, "parameters": {"properties": {"numbers": {"description": "A list of numbers.", "items": {"type": "number"}, "type": "array"}}, "required": ["numbers"], "type": "object"}}, {"description": "Finds all the matched patterns in the input string based on the given regular expression.", "name": "find_patterns", "output_parameters": {"properties": {"output_0": {"description": "A list of dictionaries, where each dictionary contains the start index, length, and matched string of a single match.", "type": "array"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to search in.", "type": "string"}, "regex": {"description": "The regular expression to search for in the input string.", "type": "string"}}, "required": ["regex", "input_string"], "type": "object"}}, {"description": "Finds the name of the preferred function from a list of function signatures.\n\nThe preference is based on three criteria:\n- The function is named `preferred_function`\n- The function's second argument is named `alpha`\n- The function has at least two arguments", "name": "find_preferred_function", "output_parameters": {"properties": {"output_0": {"description": "The name of the preferred function, or None if no preferred function is found.", "type": "string"}}}, "parameters": {"properties": {"signatures": {"description": "A list of function signatures, where each signature is a tuple containing the function name, number of arguments, and argument names.", "items": {"prefixItems": [{"type": "string"}, {"type": "integer"}, {"items": {"type": "string"}, "type": "array"}], "type": "array"}, "type": "array"}}, "required": ["signatures"], "type": "object"}}], "gold_answer": 2550}
{"sample_id": "d53916b0-6795-4503-8f9b-c3878546bd5f", "input": "A boat takes 19 hours for travelling downstream from point A to point B and coming back to a point C which is at midway between A and B. If the velocity of the stream is 4 kmph and the speed of the boat in still water is 14 kmph, what is the distance between A and B ?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 14, "arg_1": 4}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": 1, "arg_1": "$var_1.result$"}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 14, "arg_1": 4}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 2}}, {"name": "divide", "label": "$var_5", "arguments": {"arg_0": 1, "arg_1": "$var_4.result$"}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_5.result$"}}, {"name": "divide", "label": "$var_7", "arguments": {"arg_0": 19, "arg_1": "$var_6.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}], "gold_answer": 180.0}
{"sample_id": "000a5224-26c5-484b-948e-92df48c1b6af", "input": "Given an array [1, 2, 3, 5, 6], find the smallest unused number and format it with 2 spaces indentation.", "output": [{"name": "smallest_unused_number", "arguments": {"array": [1, 2, 3, 5, 6]}, "label": "$var1"}, {"name": "format_line", "arguments": {"indent": 2, "line": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Converts a list of pairs into a list of dictionaries.", "name": "pairs_to_dicts", "output_parameters": {"properties": {"output_0": {"description": "A list of dictionaries. Each dictionary is a key-value pair of the\n    corresponding pair in the input list.", "type": "array"}}}, "parameters": {"properties": {"pairs": {"description": "A list of pairs. Each pair is a tuple of a string and a value.", "items": {"prefixItems": [{"type": "string"}, {}], "type": "array"}, "type": "array"}}, "required": ["pairs"], "type": "object"}}, {"description": "Accesses a specific byte within a memory buffer using advanced pointer arithmetic.", "name": "access_byte", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"buffer": {"description": "The buffer containing raw bytes.", "type": "object"}, "index": {"description": "A 16-bit integer specifying the index of the desired byte within the buffer.", "type": "integer"}}, "required": ["buffer", "index"], "type": "object"}}, {"description": "Finds the smallest unused number in an array.", "name": "smallest_unused_number", "output_parameters": {"properties": {"output_0": {"description": "The smallest unused number.", "type": "integer"}}}, "parameters": {"properties": {"array": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["array"], "type": "object"}}, {"description": "Determines whether two DNA sequences match.", "name": "sequences_match", "output_parameters": {"properties": {"output_0": {"description": "True if the sequences match, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"seq1": {"description": "The first DNA sequence.", "items": {"type": "string"}, "type": "array"}, "seq2": {"description": "The second DNA sequence.", "items": {"type": "string"}, "type": "array"}}, "required": ["seq1", "seq2"], "type": "object"}}, {"description": "Finds the first value in `data` that matches the first key in `keys`.", "name": "find_by_key", "output_parameters": {"properties": {"output_0": {"description": "The first value in `data` that matches the first key in `keys`, or `None` if no match is found.", "type": ["integer", "number"]}}}, "parameters": {"properties": {"data": {"additionalProperties": {"type": ["integer", "number"]}, "description": "A dictionary containing key-value pairs.", "type": "object"}, "keys": {"description": "A list of keys to search for in `data`.", "items": {"type": "string"}, "type": "array"}}, "required": ["data", "keys"], "type": "object"}}, {"description": "Formats a line of text by wrapping it in `[]` and adding indentation.", "name": "format_line", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"indent": {"description": "The number of spaces to add at the beginning of the line.", "type": "integer"}, "line": {"description": "The line of text to be formatted.", "type": ["integer", "number", "string"]}}, "required": ["line"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Calculates the length of a string.", "name": "function_1", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"string": {"description": "The string to calculate the length of.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Creates a function that takes in a string as an argument and returns either \"Hello, World!\" or \"Hello, {name}!\".", "name": "greet_world_or_name", "output_parameters": {"properties": {"output_0": {"description": "A greeting string.", "type": "string"}}}, "parameters": {"properties": {"name": {"description": "The input string.", "nullable": true, "type": "string"}}, "required": ["name"], "type": "object"}}], "gold_answer": "    [2]"}
{"sample_id": "fe3ebaf1-4861-425f-a681-3ed6815e4f24", "input": "The sum of two numbers is 184. If one-third of the one exceeds one-seventh of the other by 8, find the smaller number.", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 184, "arg_1": 3}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": 3, "arg_1": 4}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 3}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 8}}, {"name": "add", "label": "$var_5", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_4.result$"}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": 3, "arg_1": 4}}, {"name": "add", "label": "$var_7", "arguments": {"arg_0": "$var_6.result$", "arg_1": 3}}, {"name": "divide", "label": "$var_8", "arguments": {"arg_0": "$var_5.result$", "arg_1": "$var_7.result$"}}], "tools": [{"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "floor", "description": "Return the largest integer less than or equal to x.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the flooring result", "type": "int"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "factorial", "description": " Calculate the factorial of a non-negative integer", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the factorial result", "type": "int"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "remainder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}], "gold_answer": 72.0}
{"sample_id": "4d67d516-2b7b-4e50-81a5-9ddf5dd6e580", "input": "The value of x + x(xx) when x = 7", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 7, "arg_1": 7}}, {"name": "multiply", "label": "$var_2", "arguments": {"arg_0": 7, "arg_1": "$var_1.result$"}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 7}}], "tools": [{"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "lcm", "description": "Calculate the least common multiple of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the least common multiple", "type": "int or float"}}}, {"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "min_number", "description": "Find the minimum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Minimum value", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 350.0}
{"sample_id": "66fc3755-c796-4aec-a616-4d193460e181", "input": "Given a rectangle with width 10 and height 20, compute its area using the compute_area API. Then, round up the area to the nearest multiple of 5 using the round_to_multiple API.", "output": [{"name": "compute_area", "arguments": {"width": 10, "height": 20}, "label": "$var1"}, {"name": "round_to_multiple", "arguments": {"number": "$var1.output_0$", "multiple": 5}, "label": "$var2"}], "tools": [{"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns a list of all positive divisors of a positive integer `n`.", "name": "get_array_of_divisors", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"n": {"description": "A positive integer.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Extracts the first phone number from a given string.", "name": "extract_phone_number", "output_parameters": {"properties": {"output_0": {"description": "The first phone number found in the string, or None if no phone number is found.", "type": "string"}}}, "parameters": {"properties": {"text": {"description": "The input string that may contain one or more phone numbers.", "type": "string"}}, "required": ["text"], "type": "object"}}, {"description": "Converts text in camelCase format to snake_case.", "name": "convert_camel_case_to_snake_case", "output_parameters": {"properties": {"output_0": {"description": "The converted text.", "type": "string"}}}, "parameters": {"properties": {"text": {"description": "The text to convert.", "type": "string"}}, "required": ["text"], "type": "object"}}, {"description": "Aligns a string `s` to the left within a string of length `length`.\nIf the original string is longer than `length`, it will be truncated from the right.\nIf the original string is shorter than `length`, spaces will be added to the right.", "name": "align_left", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"length": {"description": "The desired length of the string. Must be a nonnegative integer.", "type": ["integer", "number"]}, "s": {"description": "The string to be aligned.", "type": "string"}}, "required": ["s", "length"], "type": "object"}}, {"description": "Computes the area of a rectangle given its width and height.", "name": "compute_area", "output_parameters": {"properties": {"output_0": {"description": "The area of the rectangle.", "type": "number"}}}, "parameters": {"properties": {"height": {"description": "The height of the rectangle.", "type": "number"}, "width": {"description": "The width of the rectangle.", "type": "number"}}, "required": ["width", "height"], "type": "object"}}, {"description": "Returns a hexadecimal string representation of the number.", "name": "hex_str", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"n": {"description": "The number to convert to hexadecimal.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Rounds up a given number to the nearest multiple of another number.", "name": "round_to_multiple", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"multiple": {"description": "The multiple to round up to.", "type": ["integer", "number"]}, "number": {"description": "The number to round up.", "type": ["integer", "number"]}}, "required": ["number", "multiple"], "type": "object"}}, {"description": "Removes phone numbers that are not valid from a given text.", "name": "remove_bad_phone_numbers", "output_parameters": {"properties": {"output_0": {"description": "The input text with the bad phone numbers removed.", "type": "object"}}}, "parameters": {"properties": {"text": {"description": "The input text containing phone numbers.", "type": "object"}}, "required": ["text"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Randomly accesses an element at a given index in a list.", "name": "random_access", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"index": {"description": "The index to access.", "type": "integer"}, "lst": {"description": "The list to access.", "items": {"type": "object"}, "type": "array"}}, "required": ["lst", "index"], "type": "object"}}, {"description": "Returns the file name from a full file path.", "name": "get_file_name", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"full_path": {"description": "The full file path.", "type": ["object", "string"]}}, "required": ["full_path"], "type": "object"}}, {"description": "Traverses a directory structure and deletes all empty directories.", "name": "delete_empty_directories", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"root_dir": {"description": "The root directory path.", "type": "string"}}, "required": ["root_dir"], "type": "object"}}, {"description": "Calculates the size of an image in bytes.", "name": "calculate_image_size", "output_parameters": {"properties": {"output_0": {"description": "A tuple of the width and height of the image in bytes.", "type": "array"}}}, "parameters": {"properties": {"height": {"description": "The height of the image in pixels.", "type": "integer"}, "resolution": {"description": "The resolution of the image (32-bit or 64-bit).", "type": "integer"}, "width": {"description": "The width of the image in pixels.", "type": "integer"}}, "required": ["width", "height", "resolution"], "type": "object"}}, {"description": "Parses a boolean value from a string.", "name": "parse_boolean", "output_parameters": {"properties": {"output_0": {"description": "True if the string is \"true\" (case-insensitive), False if the string is \"false\", and None otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"text": {"description": "The string to parse.", "type": "string"}}, "required": ["text"], "type": "object"}}], "gold_answer": 200}
{"sample_id": "140ab128-b764-44f4-808c-0bf1f14ab4fd", "input": "A certain drink of type A is prepared by mixing 4 parts milk with 3 parts fruit juice. Another drink of type B is prepared by mixing 4 parts of fruit juice and 3 parts of milk. How many liters of fruit juice must be added to 105 liters of drink A to convert it to drink B?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 4, "arg_1": 3}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": 4, "arg_1": "$var_1.result$"}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 105}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 4}}, {"name": "divide", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 3}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": 4, "arg_1": 3}}, {"name": "divide", "label": "$var_7", "arguments": {"arg_0": 3, "arg_1": "$var_6.result$"}}, {"name": "multiply", "label": "$var_8", "arguments": {"arg_0": "$var_7.result$", "arg_1": 105}}, {"name": "subtract", "label": "$var_9", "arguments": {"arg_0": "$var_5.result$", "arg_1": "$var_8.result$"}}], "tools": [{"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "factorial", "description": " Calculate the factorial of a non-negative integer", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the factorial result", "type": "int"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "choose", "description": "Calculate the number of ways to choose r items from n items without repetition and without order", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being chosen", "type": "int"}}, "output_parameter": {"result": {"description": "Number of combinations", "type": "int"}}}], "gold_answer": 35.0}
{"sample_id": "4c7fbe56-cbcf-4c99-8d67-ac7b56b6f15c", "input": "The mall charges 50 cents for the first hour of parking and $3 for each additional hour until the customer reaches 4 hours, after that the parking fee is $1 per hour. If a certain customer parked his in the mall for 7 hours and 30 minutes, how much is he going to pay?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 3, "arg_1": 3}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 7, "arg_1": 4}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": 50, "arg_1": 100}}, {"name": "add", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}, {"name": "multiply", "label": "$var_5", "arguments": {"arg_0": "$var_4.result$", "arg_1": 1}}, {"name": "add", "label": "$var_6", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_5.result$"}}, {"name": "divide", "label": "$var_7", "arguments": {"arg_0": 50, "arg_1": 100}}, {"name": "add", "label": "$var_8", "arguments": {"arg_0": "$var_6.result$", "arg_1": "$var_7.result$"}}], "tools": [{"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}, {"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}], "gold_answer": 13.0}
{"sample_id": "f5680211-f44c-44ee-8ae7-efd96c6886ff", "input": "Calculate the number of AND gates needed to implement a full adder circuit for two 8-bit numbers. Then, divide the result by 2.", "output": [{"name": "number_of_gates", "arguments": {"n": 8}, "label": "$var1"}, {"name": "divide_int", "arguments": {"dividend": "$var1.output_0$", "divisor": 2}, "label": "$var2"}], "tools": [{"description": "Calculates the count of the number of occurrences of each unique integer in the input list, sorted in ascending order of the integers themselves.", "name": "count_unique_ints", "output_parameters": {"properties": {"output_0": {"description": "A list of integers that represent the count of the number of occurrences of each unique integer in the input list, sorted in ascending order of the integers themselves.", "type": "array"}}}, "parameters": {"properties": {"input_list": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["input_list"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the quotient of two integers, rounded down to the nearest integer.\nIf the denominator is 0, returns 0.", "name": "divide_int", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"dividend": {"description": "The numerator.", "type": "integer"}, "divisor": {"description": "The denominator.", "type": "integer"}}, "required": ["dividend", "divisor"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the number of unique states present in a list of states.", "name": "count_states_in_state_list", "output_parameters": {"properties": {"output_0": {"description": "The number of unique states present in the list.", "type": "integer"}}}, "parameters": {"properties": {"state_list": {"description": "A list of strings that represent the state names.", "items": {"type": "string"}, "type": "array"}}, "required": ["state_list"], "type": "object"}}, {"description": "Calculates the number of AND gates needed to implement a full adder circuit for two `n`-bit numbers.", "name": "number_of_gates", "output_parameters": {"properties": {"output_0": {"description": "The number of AND gates needed to implement the full adder circuit.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "The number of bits in the input numbers.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Returns the first `n` names in the `names` list of the given object.", "name": "get_first_n_names", "output_parameters": {"properties": {"output_0": {"description": "A list of the first `n` names in the `names` list. If the object doesn't have a `names` list attribute,\n    or if the `names` list is shorter than `n`, or if `n` is negative, the function returns an empty list.", "type": "array"}}}, "parameters": {"properties": {"n": {"description": "An integer representing the number of names to return.", "type": "integer"}, "obj": {"description": "An object that has a list of names stored in an attribute named `names`."}}, "required": ["obj", "n"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Generates a random boolean value with a given probability `p`.\nThe function returns True with probability `p` and False with probability `1 - p`.", "name": "random_boolean", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"p": {"description": "The probability of returning True.", "type": ["integer", "number"]}}, "required": ["p"], "type": "object"}}, {"description": "Reads a binary file of a given size (in bytes) and returns the number of 1-bits in the last byte of the file.", "name": "count_1bits_last_byte", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"filename": {"description": "The name of the binary file.", "type": "string"}, "size": {"description": "The size of the binary file in bytes.", "type": "integer"}}, "required": ["filename", "size"], "type": "object"}}, {"description": "Returns the name of the employee with the highest salary whose title is not \"CEO\".\nIf there is a tie for highest salary, returns the first employee with that salary.\nIf there are no employees with the desired title, returns `None`.", "name": "highest_salary_employee", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"employees": {"description": "A list of dictionaries containing employee information.", "items": {"additionalProperties": {"type": "string"}, "type": "object"}, "type": "array"}}, "required": ["employees"], "type": "object"}}, {"description": "Calculates the sum of two hexadecimal numbers.", "name": "calculate_hexadecimal_addition", "output_parameters": {"properties": {"output_0": {"description": "The sum of the two hexadecimal numbers as a hexadecimal string.", "type": "string"}}}, "parameters": {"properties": {"hex1": {"description": "The first hexadecimal number as a string.", "type": "string"}, "hex2": {"description": "The second hexadecimal number as a string.", "type": "string"}}, "required": ["hex1", "hex2"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}], "gold_answer": 3}
{"sample_id": "88b88263-a647-4da2-9c9a-329970a6aa3a", "input": "Given a list of numbers [1, 2, 3, 4, 5], calculate the sum of the numbers, then find the difference between the maximum and minimum values of the list, and finally compare the sum and the difference.", "output": [{"name": "sum_of_consecutive_numbers", "arguments": {"n": 5}, "label": "$var1"}, {"name": "max_minus_min", "arguments": {"numbers": [1, 2, 3, 4, 5]}, "label": "$var2"}, {"name": "compare_variables", "arguments": {"a": "$var1.output_0$", "b": "$var2.output_0$"}, "label": "$var3"}], "tools": [{"description": "Processes the purchases data and returns a new DataFrame with grouped items for each user.", "name": "process_purchases", "output_parameters": {"properties": {"output_0": {"description": "A new DataFrame with columns 'user_id' and 'items' that contains the items purchased by each user.\n    The 'items' column is a list of the items purchased by each user.", "type": "object"}}}, "parameters": {"properties": {"df": {"description": "The input DataFrame with columns 'user_id', 'item_id', and 'purchase_count'.", "type": "object"}}, "required": ["df"], "type": "object"}}, {"description": "Returns a dictionary with a specific structure for storing information in a caching system.", "name": "get_default_dict", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the following structure:\n    {\n        \"client\": {},\n        \"rooms\": {},\n        \"houses\": {},\n        \"entities\": {},\n        \"relationships\": {},\n    }", "type": "object"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Generates a 3 by 3 matrix of random numbers, where each row is a randomly generated 3D vector.\nThe absolute value of each random number is less than or equal to 1.", "name": "generate_matrix_of_3d_vectors", "output_parameters": {"properties": {"output_0": {"description": "A 3 by 3 matrix of random numbers.", "type": "array"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Compares two variables and returns a string describing the comparison result.", "name": "compare_variables", "output_parameters": {"properties": {"output_0": {"description": "A string describing the comparison result.", "type": "string"}}}, "parameters": {"properties": {"a": {"description": "The first variable to compare.", "type": ["integer", "number"]}, "b": {"description": "The second variable to compare.", "type": ["integer", "number"]}}, "required": ["a", "b"], "type": "object"}}, {"description": "Returns a string representing the sign of a number.", "name": "get_sign", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"n": {"description": "The number to check the sign of.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Formats a numeric value with units.", "name": "format_with_units", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"unit": {"description": "The unit of the value.", "type": "string"}, "value": {"description": "The numeric value to be formatted.", "type": ["number", "string"]}}, "required": ["value", "unit"], "type": "object"}}, {"description": "Calculates the sum of two numbers.", "name": "my_calculator", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"a": {"description": "The first number.", "type": ["integer", "number"]}, "b": {"description": "The second number.", "type": ["integer", "number"]}}, "required": ["a", "b"], "type": "object"}}, {"description": "Calculates the difference between the maximum and minimum values of a list of numbers.", "name": "max_minus_min", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"numbers": {"description": "A list of numbers.", "items": {"type": "number"}, "type": "array"}}, "required": ["numbers"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the sum of all elements in the list [1, 2, ..., n].", "name": "sum_of_consecutive_numbers", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"n": {"description": "A non-negative integer or float.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}], "gold_answer": "a is greater than b"}
{"sample_id": "0d266b2a-325c-4cdb-9615-28475d4e2d37", "input": "A man can row upstream at 25 kmph and downstream at 43 kmph, and then find the speed of the man in still water?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 25, "arg_1": 43}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 2}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "remainder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 34.0}
{"sample_id": "84016e64-28b9-4235-9228-665ecedd96c8", "input": "In one year, the population, of a village increased by 10% and in the next year, it decreased by 10%. If at the end of 2nd year, the population was 7920, what was it in the beginning?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 10, "arg_1": 100}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 1, "arg_1": "$var_1.result$"}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": 7920, "arg_1": "$var_2.result$"}}, {"name": "divide", "label": "$var_4", "arguments": {"arg_0": 10, "arg_1": 100}}, {"name": "add", "label": "$var_5", "arguments": {"arg_0": 1, "arg_1": "$var_4.result$"}}, {"name": "divide", "label": "$var_6", "arguments": {"arg_0": "$var_3.result$", "arg_1": "$var_5.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "cube_edge_by_volume", "description": "Calculate the edge length of a cube given its volume", "parameters": {"arg_0": {"description": "Volume of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the cube", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}], "gold_answer": 8000.0}
{"sample_id": "73456b3f-d04d-4746-ae18-622952722f11", "input": "Given a + b = 1, find the value of 2a + 2b. Two solutions are presented below. Only\none is correct, even though both yield the correct answer.", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 2, "arg_1": 1}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 2}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": 2, "arg_1": 1}}, {"name": "subtract", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}], "tools": [{"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "sqrt", "description": "Calculate the square root of a non-negative number.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the square root of the provided number", "type": "int"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "surface_sphere", "description": "Calculate the surface area of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the sphere", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "volume_sphere", "description": "Calculate the volume of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the sphere", "type": "float"}}}], "gold_answer": 2.0}
{"sample_id": "b58c0d0c-24c1-4349-9442-913d8aa753b7", "input": "I have a string \"hello\" and I want to multiply it by 3, then compute the SHA-256 hash of the result.", "output": [{"name": "multiply_string", "arguments": {"str_input": "hello", "n": 3}, "label": "$var1"}, {"name": "hex_sha256", "arguments": {"data": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Replaces all occurrences of the literal string \"abc\" in the input string with the macro name MACRO_X.", "name": "replace_abc_with_macro", "output_parameters": {"properties": {"output_0": {"description": "The input string with all occurrences of \"abc\" replaced with MACRO_X.", "type": "object"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to search and replace in.", "type": "object"}}, "required": ["input_string"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Checks if the data types of a pandas data frame are as expected.", "name": "check_data_types", "output_parameters": {"properties": {"output_0": {"description": "A boolean value indicating whether the data types are valid or not.", "type": "boolean"}}}, "parameters": {"properties": {"df": {"description": "The pandas data frame to check.", "type": "object"}, "expected_types": {"additionalProperties": {"type": "object"}, "description": "A dictionary mapping column names to expected data types.", "type": "object"}}, "required": ["df", "expected_types"], "type": "object"}}, {"description": "Generates a dictionary of PV names based on a list of motor names.", "name": "generate_pv_names", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with motor names as keys and PV names as values.", "type": "object"}}}, "parameters": {"properties": {"motor_names": {"description": "A list of motor names.", "items": {"type": "string"}, "type": "array"}}, "required": ["motor_names"], "type": "object"}}, {"description": "Validates whether a given string is a correct time representation in the 24-hour format.", "name": "validate_time", "output_parameters": {"properties": {"output_0": {"description": "True if the string is a valid time representation, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"time_string": {"description": "The string to validate.", "type": "string"}}, "required": ["time_string"], "type": "object"}}, {"description": "Processes a pandas DataFrame and returns a list of tuples containing the values of the \"Year\" and \"City\" columns for rows where the \"Type\" column is equal to \"Gold\".", "name": "process_dataframe", "output_parameters": {"properties": {"output_0": {"description": "A list of tuples containing the values of the \"Year\" and \"City\" columns for rows where the \"Type\" column is equal to \"Gold\", or None if the \"Type\" column is not equal to \"Gold\".", "type": "array"}}}, "parameters": {"properties": {"df": {"description": "The input DataFrame.", "type": "object"}}, "required": ["df"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Checks if a string exists in an object's list of strings.", "name": "handle_scenario", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"obj": {"description": "The object containing the list of strings."}, "string": {"description": "The string to check for in the object's list of strings.", "type": "string"}}, "required": ["obj", "string"], "type": "object"}}, {"description": "Multiplies a string by a given integer.", "name": "multiply_string", "output_parameters": {"properties": {"output_0": {"description": "The input string repeated `n` times.", "type": "string"}}}, "parameters": {"properties": {"n": {"description": "The number of times to repeat the string.", "type": "integer"}, "str_input": {"description": "The input string to be multiplied.", "type": "string"}}, "required": ["str_input", "n"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Retrieves a list of unique class names from a dictionary of class names and instances.\nIf a class is not found, the function returns an empty list.", "name": "get_unique_class_names", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"classes": {"additionalProperties": {"type": "object"}, "description": "A dictionary containing class names as keys and instances as values.", "type": "object"}}, "required": ["classes"], "type": "object"}}, {"description": "Returns the port name and interface type of a flow interface name.", "name": "get_port_name_and_interface_type", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the port name and interface type.", "type": "array"}}}, "parameters": {"properties": {"flow_interface_name": {"description": "The flow interface name.", "type": "string"}}, "required": ["flow_interface_name"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Computes the SHA-256 hash of a string and returns it as a hexadecimal string.", "name": "hex_sha256", "output_parameters": {"properties": {"output_0": {"description": "The SHA-256 hash of the input string as a hexadecimal string.", "type": "string"}}}, "parameters": {"properties": {"data": {"description": "The input string.", "type": "string"}}, "required": ["data"], "type": "object"}}, {"description": "Reads a JSON string and converts it into a Python dictionary.", "name": "read_json", "output_parameters": {"properties": {"output_0": {"description": "A Python dictionary.", "type": "object"}}}, "parameters": {"properties": {"data": {"description": "The JSON string to read.", "type": "string"}}, "required": ["data"], "type": "object"}}, {"description": "Computes the roots of a quadratic equation ax^2 + bx + c = 0.", "name": "roots", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"a": {"description": "The coefficient of the quadratic term.", "type": "number"}, "b": {"description": "The coefficient of the linear term.", "type": "number"}, "c": {"description": "The constant term.", "type": "number"}}, "required": ["a", "b", "c"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Simulates a coin toss experiment and returns a list of the number of heads obtained from each toss.", "name": "coin_toss_experiment", "output_parameters": {"properties": {"output_0": {"description": "A list of the number of heads obtained from each toss.", "type": "array"}}}, "parameters": {"properties": {"n": {"description": "The number of times the coin is tossed.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}], "gold_answer": "ee989411b1cb1087161b46501562588be3430d6fd110115c66bdd644b76e0779"}
{"sample_id": "504e3a02-c0df-4e39-9cf5-ee7ec9c80eb6", "input": "By selling an article at Rs.800, a shopkeeper makes a profit of 25%. At what price should he sell the article so as to make a loss of 45%?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 800, "arg_1": 100}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": 25, "arg_1": 100}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": 800, "arg_1": 100}}, {"name": "add", "label": "$var_5", "arguments": {"arg_0": 25, "arg_1": 100}}, {"name": "divide", "label": "$var_6", "arguments": {"arg_0": "$var_4.result$", "arg_1": "$var_5.result$"}}, {"name": "multiply", "label": "$var_7", "arguments": {"arg_0": "$var_6.result$", "arg_1": 45}}, {"name": "divide", "label": "$var_8", "arguments": {"arg_0": "$var_7.result$", "arg_1": 100}}, {"name": "subtract", "label": "$var_9", "arguments": {"arg_0": "$var_3.result$", "arg_1": "$var_8.result$"}}], "tools": [{"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "min_number", "description": "Find the minimum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Minimum value", "type": "float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}], "gold_answer": 352.0}
{"sample_id": "52271e64-fcdc-4461-9777-27ca3767e675", "input": "If 85 percent of the test takers taking an old paper and pencil GMAT exam answered the first question on a given math section correctly, and 75 percent of the test takers answered the second question correctly, and 15 percent of the test takers answered neither question correctly, what percent answered both correctly?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 85, "arg_1": 75}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 15}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 100}}], "tools": [{"name": "surface_cube", "description": "Calculate the surface area of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cube", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}], "gold_answer": 75.0}
{"sample_id": "e854fd67-4e08-483f-a4b2-a4c7c4f85d17", "input": "In Town P, 70 percent of the population are employed, and 42 percent of the population are employed males. What percent of the employed people in Town P are females?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 70, "arg_1": 42}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 70}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 100}}], "tools": [{"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "lcm", "description": "Calculate the least common multiple of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the least common multiple", "type": "int or float"}}}], "gold_answer": 40.0}
{"sample_id": "3106c0ed-dab3-49f7-88a2-d96f9d28adb3", "input": "If 35% of a number is 12 less than 50% of that number, then the number is?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 50, "arg_1": 35}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 100}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": 12, "arg_1": "$var_2.result$"}}], "tools": [{"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "surface_sphere", "description": "Calculate the surface area of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the sphere", "type": "float"}}}, {"name": "rectangle_perimeter", "description": "Calculate the perimeter of a rectangle", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle perimeter", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "circumface", "description": "Calculate the circumference of a circle", "parameters": {"arg_0": {"description": "Radius of the circle", "type": "float"}}, "output_parameter": {"result": {"description": "Circumference of the circle", "type": "float"}}}, {"name": "lcm", "description": "Calculate the least common multiple of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the least common multiple", "type": "int or float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}], "gold_answer": 80.0}
{"sample_id": "1da6066a-3761-4fec-bdce-11b0ebc7af42", "input": "Calculate the sum of the cubes of the first 5 integers, then multiply the result by 2.", "output": [{"name": "sum_of_cubes", "arguments": {"n": 5}, "label": "$var1"}, {"name": "multiply_integers", "arguments": {"a": "$var1.output_0$", "b": 2}, "label": "$var2"}], "tools": [{"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Formats a list of messages with their text and date.", "name": "prepare_message", "output_parameters": {"properties": {"output_0": {"description": "A list of formatted messages.", "type": "array"}}}, "parameters": {"properties": {"messages": {"description": "A list of Message objects.", "items": {"type": "object"}, "type": "array"}}, "required": ["messages"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Calculates the size of a given object in megabytes (MB) and returns a string with the rounded size in MB followed by the unit \"MB\".", "name": "get_object_size_in_mb", "output_parameters": {"properties": {"output_0": {"description": "A string with the rounded size in MB followed by the unit \"MB\".", "type": "string"}}}, "parameters": {"properties": {"obj": {"description": "The object to calculate the size of.", "type": "object"}}, "required": ["obj"], "type": "object"}}, {"description": "Creates a dictionary from keyword arguments.", "name": "kwargs_to_dict", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"kwargs": {"description": "Keyword arguments to be converted into a dictionary."}}, "required": ["kwargs"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Concatenates a list of byte strings together, with each concatenated string having a 32-bit length prefix at its beginning.", "name": "concatenate_with_length_prefix", "output_parameters": {"properties": {"output_0": {"description": "The concatenated byte string.", "type": "object"}}}, "parameters": {"properties": {"strings": {"description": "A list of byte strings to be concatenated.", "items": {"type": "object"}, "type": "array"}}, "required": ["strings"], "type": "object"}}, {"description": "Calculates the sum of the cubes of the first n integers.", "name": "sum_of_cubes", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"n": {"description": "The number of integers to sum the cubes of.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Parses a dictionary of string-based key-value pairs.", "name": "parse_string_dict", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the keys and values.", "type": "object"}}}, "parameters": {"properties": {"string_dict": {"description": "A string of key-value pairs, where the key and value are separated by a colon and a space.", "type": "string"}}, "required": ["string_dict"], "type": "object"}}, {"description": "Generates a dictionary with the keys as the elements of the list and the values as the number of occurrences of the elements in the list.", "name": "get_element_counts", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the keys as the elements of the list and the values as the number of occurrences of the elements in the list.", "type": "object"}}}, "parameters": {"properties": {"lst": {"description": "The list of elements.", "items": {"type": "integer"}, "type": "array"}}, "required": ["lst"], "type": "object"}}, {"description": "Calculates the distance between a point and a center point on a two-dimensional plane.", "name": "dist_to_point", "output_parameters": {"properties": {"output_0": {"description": "The distance as a floating-point number.", "type": "number"}}}, "parameters": {"properties": {"center": {"description": "A tuple (x, y) representing the center point.", "prefixItems": [{"type": "number"}, {"type": "number"}], "type": "array"}, "point": {"description": "A tuple (x, y) representing a point on the plane.", "prefixItems": [{"type": "number"}, {"type": "number"}], "type": "array"}}, "required": ["point", "center"], "type": "object"}}, {"description": "Multiplies two integers `a` and `b` and returns their product.", "name": "multiply_integers", "output_parameters": {"properties": {"output_0": {"description": "The product of `a` and `b`.", "type": "integer"}}}, "parameters": {"properties": {"a": {"description": "The first integer.", "type": "integer"}, "b": {"description": "The second integer.", "type": "integer"}}, "required": ["a", "b"], "type": "object"}}, {"description": "Returns a string of the names separated by commas and the word \"and\" before the last name.\nIf the list contains only one name, return it as a string.", "name": "separated_names", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"names": {"description": "A list of names.", "items": {"type": "string"}, "type": "array"}}, "required": ["names"], "type": "object"}}, {"description": "Returns a map of operations to apply to every band in the dataset.", "name": "extract_bands", "output_parameters": {"properties": {"output_0": {"description": "A dictionary where the keys are the band names and the values are the operations to apply.", "type": "object"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Finds the size of a matrix as a tuple `(height, width)`.", "name": "size", "output_parameters": {"properties": {"output_0": {"description": "The size of the matrix as a tuple `(height, width)`.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "The input matrix.", "items": {"items": {"type": "number"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Retrieves a list of all file names in a given directory and its subdirectories.", "name": "get_all_filenames", "output_parameters": {"properties": {"output_0": {"description": "A list of file names.", "type": "array"}}}, "parameters": {"properties": {"directory": {"description": "The path to the directory to traverse.", "type": "string"}}, "required": ["directory"], "type": "object"}}, {"description": "Checks if a given string is a valid name.\n\nA valid name is defined as a string that does not contain any non-alphabetic characters and has a length of at least 2.", "name": "is_valid_name", "output_parameters": {"properties": {"output_0": {"description": "True if the string is a valid name, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"s": {"description": "The string to be checked.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}], "gold_answer": 450}
{"sample_id": "000b6bed-2a29-4199-a359-0e107922a1ff", "input": "Sandy bought 65 books for $1180 from one shop and 55 books for $860 from another shop. What is the average price that Sandy paid per book?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 1180, "arg_1": 860}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": 65, "arg_1": 55}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "circumface", "description": "Calculate the circumference of a circle", "parameters": {"arg_0": {"description": "Radius of the circle", "type": "float"}}, "output_parameter": {"result": {"description": "Circumference of the circle", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}, {"name": "surface_cylinder", "description": "Calculate the surface area of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cylinder", "type": "float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 17.0}
{"sample_id": "e70bd2c9-99af-410a-bc6d-61a65e00f7d8", "input": "There are 24 students in a seventh grade class. They decided to plant birches and roses at the school's backyard. While each girl planted 3 roses, every three boys planted 1 birch. By the end of the day they planted 2424 plants. How many birches were planted?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 3, "arg_1": 24}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 24}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": 3, "arg_1": 3}}, {"name": "subtract", "label": "$var_4", "arguments": {"arg_0": "$var_3.result$", "arg_1": 1}}, {"name": "divide", "label": "$var_5", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_4.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "factorial", "description": " Calculate the factorial of a non-negative integer", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the factorial result", "type": "int"}}}, {"name": "reminder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "speed", "description": "Calculate speed given distance and time.", "parameters": {"arg_0": {"description": "distance", "type": "int or float"}, "arg_1": {"description": "time", "type": "int or float"}}, "output_parameter": {"result": {"description": "the speed", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}], "gold_answer": 6.0}
{"sample_id": "fb08a631-0974-4e7c-8162-8f607f3fe9fe", "input": "Remove any leading or trailing commas, colons, or spaces from the string \"   :,hello,world,:   \", then check if the resulting string has an attribute named \"length\" and concatenate its value to the string \"The length of the string is: \".", "output": [{"name": "remove_leading_trailing_characters", "arguments": {"input_string": "   :,hello,world,:   "}, "label": "$var1"}, {"name": "check_and_concatenate", "arguments": {"obj": "$var1.output_0$", "attribute_name": "length", "string": "The length of the string is: "}, "label": "$var2"}], "tools": [{"description": "Returns a string based on the value of the input integer `x`.", "name": "find_result", "output_parameters": {"properties": {"output_0": {"description": "A string based on the value of `x`.", "type": "string"}}}, "parameters": {"properties": {"x": {"description": "The input integer.", "type": ["integer", "number"]}}, "required": ["x"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Decodes a base 16 or base 10 number encoded as a string.", "name": "decode_num", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"s": {"description": "The input string.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Calculates the number of key-value pairs in a dictionary.", "name": "dict_length", "output_parameters": {"properties": {"output_0": {"description": "The number of key-value pairs in the dictionary, or None if the input is not a dictionary.", "type": "integer"}}}, "parameters": {"properties": {"dict_input": {"additionalProperties": {}, "description": "The dictionary to calculate the length of.", "type": "object"}}, "required": ["dict_input"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Returns a dictionary of the names of all functions in the input module, indexed by the names of these functions.", "name": "get_functions_in_module", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of the names of all functions in the input module, indexed by the names of these functions.", "type": "object"}}}, "parameters": {"properties": {"module": {"description": "The input module."}}, "required": ["module"], "type": "object"}}, {"description": "Removes any leading or trailing commas, colons, or spaces from a string.\nIf the input string is empty or not a string, the function returns \"Invalid input\".", "name": "remove_leading_trailing_characters", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to be processed.", "type": ["integer", "string"]}}, "required": ["input_string"], "type": "object"}}, {"description": "Removes the trailing slash from a URL.", "name": "remove_trailing_slash", "output_parameters": {"properties": {"output_0": {"description": "The cleaned URL.", "type": ["object", "string"]}}}, "parameters": {"properties": {"url": {"description": "The URL to clean.", "type": ["object", "string"]}}, "required": ["url"], "type": "object"}}, {"description": "Checks if a given object has an attribute with a given name, concatenates the attribute value to a string, and then returns the modified string. If the attribute does not exist, returns the original string without any changes.", "name": "check_and_concatenate", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"attribute_name": {"description": "The name of the attribute to check.", "type": "string"}, "obj": {"description": "The object to check for the attribute."}, "string": {"description": "The string to concatenate the attribute value to.", "type": "string"}}, "required": ["obj", "attribute_name", "string"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Encodes a NumPy array to a base64-encoded string.", "name": "encode_numpy_array", "output_parameters": {"properties": {"output_0": {"description": "A base64-encoded string representing the array contents.", "type": "string"}}}, "parameters": {"properties": {"array": {"description": "The input NumPy array.", "type": "object"}}, "required": ["array"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the number of common elements between two collections.", "name": "count_matches", "output_parameters": {"properties": {"output_0": {"description": "The number of common elements between the two collections.", "type": "integer"}}}, "parameters": {"properties": {"nums1": {"description": "The first collection of numbers.", "items": {"type": "integer"}, "type": "array"}, "nums2": {"description": "The second collection of numbers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["nums1", "nums2"], "type": "object"}}, {"description": "Returns the last element of a sequence of numbers without using indexing.\nIf the sequence is empty, returns None.", "name": "last_element", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"sequence": {"description": "A sequence of numbers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["sequence"], "type": "object"}}, {"description": "Creates a list of tuples, where each tuple contains a variable and its rotated version.", "name": "pair_vars_with_rotated_list", "output_parameters": {"properties": {"output_0": {"description": "A list of tuples.", "type": "array"}}}, "parameters": {"properties": {"lst": {"description": "A list of variables.", "items": {"type": "integer"}, "type": "array"}}, "required": ["lst"], "type": "object"}}], "gold_answer": "The length of the string is: "}
{"sample_id": "828f87fe-f7dc-4377-8bf2-407cd471f8a6", "input": "a corporation 5 times its annual bonus to 10 of its employees . what percent of the employees ’ new bonus is the increase ?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 5, "arg_1": 1}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 5}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 100}}], "tools": [{"name": "reminder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "lcm", "description": "Calculate the least common multiple of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the least common multiple", "type": "int or float"}}}, {"name": "diagonal", "description": "Calculate the length of the diagonal of a rectangle", "parameters": {"arg_0": {"description": "Length of the rectangle", "type": "float"}, "arg_1": {"description": "Width of the rectangle", "type": "float"}}, "output_parameter": {"result": {"description": "Length of the diagonal", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "power", "description": "Raise a number to a power", "parameters": {"arg_0": {"description": "The base number", "type": "int or float"}, "arg_1": {"description": "The exponent number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the power result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 80.0}
{"sample_id": "f8392a35-50dc-44a0-bd97-d824c0b58c4f", "input": "The average monthly salary of 10 employees in an organisation is Rs. 1600. If the manager's salary is added, then the average salary increases by Rs. 100. What is the manager's monthly salary?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 1600, "arg_1": 100}}, {"name": "add", "label": "$var_2", "arguments": {"arg_0": 10, "arg_1": 1}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": 1600, "arg_1": 10}}, {"name": "subtract", "label": "$var_5", "arguments": {"arg_0": "$var_3.result$", "arg_1": "$var_4.result$"}}], "tools": [{"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "reminder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 2700.0}
{"sample_id": "f9fc63e9-d3ce-4d05-8df7-3e4c19dca79c", "input": "I have a list of numbers [1, 2, 3, 4, 5]. I want to calculate the product of these numbers using an iterative method and then check if the product is a multiple of 3 or 5.", "output": [{"name": "product_iterative", "arguments": {"numbers": [1, 2, 3, 4, 5]}, "label": "$var1"}, {"name": "is_multiple_of_3_or_5", "arguments": {"n": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Performs a vectorized lookup based on the maximum value along a dimension of either `a` or `b`.", "name": "vectorized_lookup", "output_parameters": {"properties": {"output_0": {"description": "A one-dimensional NumPy array that is the result of performing a vectorized lookup based on the maximum value along a dimension of either `a` or `b`.", "type": "object"}}}, "parameters": {"properties": {"a": {"description": "A one-dimensional NumPy array.", "type": "object"}, "b": {"description": "A one-dimensional NumPy array.", "type": "object"}}, "required": ["a", "b"], "type": "object"}}, {"description": "Concatenates two string variables and returns the newly concatenated string.\nHowever, if the two string variables have the same name, then instead of\nconcatenating them, return the concatenated name of the two variables.", "name": "concatenate_names", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"var1": {"description": "The first string variable.", "type": "string"}, "var2": {"description": "The second string variable.", "type": "string"}}, "required": ["var1", "var2"], "type": "object"}}, {"description": "Loads a plain text file into a list of unique, lowercase words.", "name": "load_words", "output_parameters": {"properties": {"output_0": {"description": "A list of unique, lowercase words.", "type": "array"}}}, "parameters": {"properties": {"filename": {"description": "The name of the file to load.", "type": "string"}}, "required": ["filename"], "type": "object"}}, {"description": "Parses a raw transaction object and returns a tuple containing the transaction amount and the recipient address.", "name": "parse_raw_transaction", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the transaction amount and the recipient address, or None if the transaction does not have the appropriate fields.", "type": "array"}}}, "parameters": {"properties": {"raw_transaction": {"description": "A dictionary representing a raw transaction object.", "type": "object"}}, "required": ["raw_transaction"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Replaces all occurrences of the substring \"is\" with \"was\" in a given string.", "name": "replace_is_with_was", "output_parameters": {"properties": {"output_0": {"description": "The modified string with all occurrences of \"is\" replaced with \"was\".", "type": "string"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to modify.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Extracts the `username` key, deletes the `password` key, and returns the `is_admin` value.\nIf the input dictionary does not have a `username` key, set the value of `username` to `None`.", "name": "username_extractor", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the `username` and `is_admin` values.", "type": "object"}}}, "parameters": {"properties": {"input_dict": {"additionalProperties": {"type": "string"}, "description": "A dictionary object.", "type": "object"}}, "required": ["input_dict"], "type": "object"}}, {"description": "Recursively traverses a nested dictionary and returns a list of the values that are integer objects.", "name": "f", "output_parameters": {"properties": {"output_0": {"description": "A list of integer values.", "type": "array"}}}, "parameters": {"properties": {"d": {"additionalProperties": {}, "description": "The nested dictionary to traverse.", "type": "object"}}, "required": ["d"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Checks if a number is a multiple of 3 or 5.", "name": "is_multiple_of_3_or_5", "output_parameters": {"properties": {"output_0": {"description": "True if the number is a multiple of 3 or 5, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"n": {"description": "The number to check.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Calculates the product of a list of numbers using an iterative method.", "name": "product_iterative", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"numbers": {"description": "A list of numbers.", "items": {"type": "number"}, "type": "array"}}, "required": ["numbers"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Checks if the input image is a binary image, i.e., only contains two distinct values.", "name": "is_binary_image", "output_parameters": {"properties": {"output_0": {"description": "A boolean value indicating whether the image is binary.", "type": "boolean"}}}, "parameters": {"properties": {"image": {"description": "A numpy array representing an image.", "type": "object"}}, "required": ["image"], "type": "object"}}, {"description": "Extracts all integer values from a nested dictionary.", "name": "extract_data", "output_parameters": {"properties": {"output_0": {"description": "A list of all integer values present in the input dictionary.", "type": "array"}}}, "parameters": {"properties": {"data": {"additionalProperties": {}, "description": "A dictionary with string keys and values of any type.", "type": "object"}}, "required": ["data"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the number of milliseconds elapsed since a given datetime object.", "name": "milliseconds_since", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"time": {"description": "The datetime object or string representation of the datetime object.", "type": ["object", "string"]}}, "required": ["time"], "type": "object"}}, {"description": "Sums a numpy array `A` along the specified dimensions.", "name": "sum_along_dims", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"A": {"description": "The numpy array to be summed.", "type": "object"}, "indices": {"description": "A list of integers representing the dimensions along which `A` should be summed.", "items": {"type": "integer"}, "type": "array"}}, "required": ["A", "indices"], "type": "object"}}], "gold_answer": true}
{"sample_id": "21ed738a-5914-4e64-9ff9-7d9edb97644b", "input": "The length of a rectangle is increased by 35% and its breadth is decreased by 20%. What is the effect on its area?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 35, "arg_1": 100}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": 100, "arg_1": 20}}, {"name": "multiply", "label": "$var_3", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_2.result$"}}], "tools": [{"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "square_edge_by_perimeter", "description": "Calculate the edge length of a square given its perimeter", "parameters": {"arg_0": {"description": "Perimeter of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "surface_cube", "description": "Calculate the surface area of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cube", "type": "float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "choose", "description": "Calculate the number of ways to choose r items from n items without repetition and without order", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being chosen", "type": "int"}}, "output_parameter": {"result": {"description": "Number of combinations", "type": "int"}}}], "gold_answer": 10800.0}
{"sample_id": "01cb6e48-053d-4af1-a500-bb21f6ee84bb", "input": "A can do a piece of work in 6 hours; B and C together can do it in 4 hours, which A and C together can do it in 3 hours. How long will B alone take to do it?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 1, "arg_1": 4}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": 1, "arg_1": 3}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": 1, "arg_1": 6}}, {"name": "subtract", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}, {"name": "subtract", "label": "$var_5", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_4.result$"}}, {"name": "divide", "label": "$var_6", "arguments": {"arg_0": 1, "arg_1": "$var_5.result$"}}], "tools": [{"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "circle_area", "description": "Calculate the area of a circle given its radius", "parameters": {"arg_0": {"description": "The circle radius", "type": "int or float"}}, "output_parameter": {"result": {"description": "the circle area", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "surface_cylinder", "description": "Calculate the surface area of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cylinder", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "square_edge_by_perimeter", "description": "Calculate the edge length of a square given its perimeter", "parameters": {"arg_0": {"description": "Perimeter of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 12.0}
{"sample_id": "266ec704-de4a-42a9-b0fe-5bded7b4ed40", "input": "Find the last occurrence of the substring 'hello' in the string 'hello world hello', then calculate the sum of the digits in the resulting index.", "output": [{"name": "last_occurrence", "arguments": {"string": "hello world hello", "substring": "hello"}, "label": "$var1"}, {"name": "get_digit_sum", "arguments": {"num": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Formats sensor data from a JSON-formatted string into a human-readable string.", "name": "format_sensor_data", "output_parameters": {"properties": {"output_0": {"description": "A human-readable string of formatted sensor data.", "type": "string"}}}, "parameters": {"properties": {"data": {"description": "A JSON-formatted string of sensor data.", "type": "string"}}, "required": ["data"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns a list of users' names whose `is_active` attribute is `True`.", "name": "get_active_users", "output_parameters": {"properties": {"output_0": {"description": "A list of users' names.", "type": "array"}}}, "parameters": {"properties": {"users": {"description": "A list of dictionaries, each representing a user.", "items": {"additionalProperties": {"type": "string"}, "type": "object"}, "type": "array"}}, "required": ["users"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Reads the contents of the given path into a byte array and returns a tuple containing the byte array and the file name of the path (without its extension).", "name": "read_binary_and_name", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the byte array and the file name of the path (without its extension).", "type": "array"}}}, "parameters": {"properties": {"path": {"description": "The path to the file.", "type": "string"}}, "required": ["path"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the greatest common divisor (gcd) of two numbers and returns a tuple (gcd, x, y) such that ax + by = gcd.", "name": "egcd", "output_parameters": {"properties": {"output_0": {"description": "A tuple (gcd, x, y) such that ax + by = gcd.", "type": "array"}}}, "parameters": {"properties": {"a": {"description": "The first number.", "type": "integer"}, "b": {"description": "The second number.", "type": "integer"}}, "required": ["a", "b"], "type": "object"}}, {"description": "Calculates the sum of values for each key in a list of tuples.", "name": "sum_by_key", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"tuple_list": {"description": "A list of tuples with a string key and an integer value.", "items": {"prefixItems": [{"type": "string"}, {"type": "integer"}], "type": "array"}, "type": "array"}}, "required": ["tuple_list"], "type": "object"}}, {"description": "Updates d1 with the keys and values from d2, where the values are lists with the original key's value appended to the end of the list.", "name": "update_d1_with_d2", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"d1": {"additionalProperties": {"type": "object"}, "description": "The dictionary to be updated.", "type": "object"}, "d2": {"additionalProperties": {"type": "integer"}, "description": "The dictionary containing the keys and values to be added to d1.", "type": "object"}}, "required": ["d1", "d2"], "type": "object"}}, {"description": "Returns the last occurrence of a substring in a given string.", "name": "last_occurrence", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"string": {"description": "The string in which to search for the substring.", "type": "string"}, "substring": {"description": "The substring to search for.", "type": "string"}}, "required": ["string", "substring"], "type": "object"}}, {"description": "Returns the first non-letter character in the input string.\nIf the input string has only letters, the function returns None.", "name": "first_non_letter", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to search for the first non-letter character.", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Calculates the sensitivity (or TPR) of the model given the confusion matrix.", "name": "calculate_sensitivity", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"confusion_matrix": {"description": "A 2D array representing the confusion matrix with the form [ [TN, FP], [FN, TP] ]", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["confusion_matrix"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Checks whether a given target exists in the dependencies of another target.", "name": "has_dependency_on_target", "output_parameters": {"properties": {"output_0": {"description": "True if the target exists in the dependencies of the other target, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"dep_target": {"description": "The dependency path.", "type": "string"}, "target": {"description": "The target path.", "type": "string"}}, "required": ["target", "dep_target"], "type": "object"}}, {"description": "Computes the sum of all digits in a given integer number.", "name": "get_digit_sum", "output_parameters": {"properties": {"output_0": {"description": "The sum of all digits in the input number. If the input number is 0,\n    it returns a string \"Input is 0, no digit to sum up\".", "type": ["integer", "string"]}}}, "parameters": {"properties": {"num": {"description": "The input number.", "type": ["integer", "number"]}}, "required": ["num"], "type": "object"}}, {"description": "Creates a dictionary from a list, where each list entry should have two items.\nIf any entry does not have two items, a ValueError exception is raised.", "name": "create_dict_from_list_pairs", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"pairs": {"description": "A list of tuples or lists containing key-value pairs.", "items": {"type": ["array", "array"]}, "type": "array"}}, "required": ["pairs"], "type": "object"}}], "gold_answer": 3}
{"sample_id": "35fc7be7-e78c-4c96-9cf6-a78a9b542ffe", "input": "If the simple interest on a certain amount in at 4% rate 5 years amounted to Rs.2160 less than the principal. What was the principal?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 4, "arg_1": 5}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 100}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 1, "arg_1": "$var_2.result$"}}, {"name": "divide", "label": "$var_4", "arguments": {"arg_0": 2160, "arg_1": "$var_3.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "remainder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}], "gold_answer": 2700.0}
{"sample_id": "b4edb02b-2784-43f9-9a5f-47d9605c2c32", "input": "I have a list of lists [[1, 2, 3], [4, 5, 6], [7, 8, 9]]. I want to flatten it into a single list. Then, I want to calculate the fraction of times each element appears in the list. After that, I want to create a string literal representation of the dictionary. Finally, I want to calculate the number of bytes required to encode the string literal using the UTF-8 encoding.", "output": [{"name": "flatten_extend", "arguments": {"list_of_lists": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "label": "$var1"}, {"name": "occurrences_fraction", "arguments": {"lst": "$var1.output_0$"}, "label": "$var2"}, {"name": "dict_to_string_literal", "arguments": {"d": "$var2.output_0$"}, "label": "$var3"}, {"name": "get_encoding_count", "arguments": {"input_string": "$var3.output_0$"}, "label": "$var4"}], "tools": [{"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the GCD (greatest common divisor) and the coefficients of the linear combination of `a` and `b` using the extended Euclidean algorithm.", "name": "xgcd", "output_parameters": {"properties": {"output_0": {"description": "A tuple of three elements, `(gcd, x, y)`, where `gcd` is the GCD of `a` and `b`, and `x` and `y` are the coefficients such that `ax + by = gcd`.", "type": "array"}}}, "parameters": {"properties": {"a": {"description": "The first integer.", "type": "integer"}, "b": {"description": "The second integer.", "type": "integer"}}, "required": ["a", "b"], "type": "object"}}, {"description": "Formats a duration in seconds into a string representing hours, minutes, and seconds.", "name": "format_pretty_time", "output_parameters": {"properties": {"output_0": {"description": "A formatted string representing the duration in hours, minutes, and seconds.", "type": "string"}}}, "parameters": {"properties": {"duration_seconds": {"description": "The duration in seconds.", "type": ["integer", "number"]}}, "required": ["duration_seconds"], "type": "object"}}, {"description": "Creates a string literal representation of a dictionary.\n\nThe dictionary's keys are enclosed in double quotes and the values are enclosed in single quotes.", "name": "dict_to_string_literal", "output_parameters": {"properties": {"output_0": {"description": "A string literal representation of the dictionary.", "type": "string"}}}, "parameters": {"properties": {"d": {"additionalProperties": {"type": "string"}, "description": "The dictionary to convert to a string literal.", "type": "object"}}, "required": ["d"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Calculates the result of a + a^b / b.", "name": "mystery_function", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"a": {"description": "The first number.", "type": ["integer", "number"]}, "b": {"description": "The second number.", "type": ["integer", "number"]}}, "required": ["a", "b"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the number of bytes required to encode the input string using the UTF-8 encoding.", "name": "get_encoding_count", "output_parameters": {"properties": {"output_0": {"description": "The number of bytes required to encode the input string using the UTF-8 encoding.", "type": "integer"}}}, "parameters": {"properties": {"input_string": {"description": "The input string to be encoded.", "type": "object"}}, "required": ["input_string"], "type": "object"}}, {"description": "Concatenates two paths together considering the Windows convention.\n\nThe path separator is a backslash ('\\').", "name": "path_join", "output_parameters": {"properties": {"output_0": {"description": "The concatenated path.", "type": "string"}}}, "parameters": {"properties": {"path1": {"description": "The first path.", "type": "string"}, "path2": {"description": "The second path.", "type": "string"}}, "required": ["path1", "path2"], "type": "object"}}, {"description": "Processes a batch of multi-dimensional arrays into tensors.", "name": "process_batch", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"batch": {"description": "A list of multi-dimensional arrays.", "items": {"items": {"type": ["integer", "number"]}, "type": "array"}, "type": "array"}, "shape": {"description": "The shape of the tensor to be created.", "items": {"type": "integer"}, "type": "array"}}, "required": ["batch", "shape"], "type": "object"}}, {"description": "Flattens a list of lists and returns a single list containing all the elements of the input list, in order.", "name": "flatten_extend", "output_parameters": {"properties": {"output_0": {"description": "A single list containing all the elements of the input list, in order.", "type": "array"}}}, "parameters": {"properties": {"list_of_lists": {"description": "A list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["list_of_lists"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Converts speed in kilometers per hour to miles per hour.", "name": "kph_to_mph", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["number", "string"]}}}, "parameters": {"properties": {"kph": {"description": "The speed in kilometers per hour.", "type": "number"}}, "required": ["kph"], "type": "object"}}, {"description": "Calculates the fraction of times each element appears in a list of integers.", "name": "occurrences_fraction", "output_parameters": {"properties": {"output_0": {"description": "A dictionary that maps each element in the list to the fraction of the times it appears in the list.", "type": "object"}}}, "parameters": {"properties": {"lst": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["lst"], "type": "object"}}, {"description": "Filters a list of dictionaries to return only those that contain a certain key.", "name": "filter_by_key", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"data": {"description": "A list of dictionaries.", "items": {"type": "object"}, "type": "array"}, "key": {"description": "A string that represents a key name.", "type": "string"}}, "required": ["data", "key"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}], "gold_answer": 225}
{"sample_id": "5bcb8a30-e90f-47f4-bfe0-e628196a7a0f", "input": "Two trains start simultaneously from opposite ends of a 175-km route and travel toward each other on parallel tracks. Train X, traveling at a constant rate, completes the 175-km trip in 4 hours. Train Y, travelling at a constant rate, completes the 175-km trip in 3 hours. How many kilometers had Train X traveled when it met Train Y?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 175, "arg_1": 4}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": 175, "arg_1": 4}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": 175, "arg_1": 3}}, {"name": "add", "label": "$var_4", "arguments": {"arg_0": "$var_2.result$", "arg_1": "$var_3.result$"}}, {"name": "divide", "label": "$var_5", "arguments": {"arg_0": 175, "arg_1": "$var_4.result$"}}, {"name": "multiply", "label": "$var_6", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_5.result$"}}], "tools": [{"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "negate", "description": "Return the negation of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "rectangle_area", "description": "Calculate the area of a rectangle given its length and width", "parameters": {"arg_0": {"description": "rectangle length", "type": "int or float"}, "arg_1": {"description": "rectangle width", "type": "int or float"}}, "output_parameter": {"result": {"description": "the rectangle area", "type": "int or float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "permutation", "description": "Calculate the number of permutations of n items taken r at a time", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being arranged", "type": "int"}}, "output_parameter": {"result": {"description": "Number of permutations", "type": "int"}}}], "gold_answer": 75.0}
{"sample_id": "e9f8d52e-89c1-4fc9-9cb6-3b596cf18dd0", "input": "I have a regular polygon with 5 sides and a radius of 10. Calculate the side length. Then, extract the components of the step name from the string \"user.stepname.parameter\". Finally, convert the extracted components to a JSON string.", "output": [{"name": "polygon", "arguments": {"n": 5, "r": 10}, "label": "$var1"}, {"name": "extract_step_components", "arguments": {"input_string": "user.stepname.parameter"}, "label": "$var2"}, {"name": "python_to_json", "arguments": {"obj": "$var2.output_0$"}, "label": "$var3"}], "tools": [{"description": "Reformats a list of student records by swapping the first and last names.", "name": "reformat_student_records", "output_parameters": {"properties": {"output_0": {"description": "A new list of tuples with the first and last names swapped.", "type": "array"}}}, "parameters": {"properties": {"records": {"description": "A list of tuples representing student records. Each tuple contains the student's first name, last name, and ID number.", "items": {"prefixItems": [{"type": "string"}, {"type": "string"}, {"type": "integer"}], "type": "array"}, "type": "array"}}, "required": ["records"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the side length of a regular polygon inscribed in a circle.", "name": "polygon", "output_parameters": {"properties": {"output_0": {"description": "", "type": "number"}}}, "parameters": {"properties": {"n": {"description": "The number of sides of the polygon.", "type": "integer"}, "r": {"description": "The radius of the circle.", "type": "integer"}}, "required": ["r", "n"], "type": "object"}}, {"description": "Sorts the records by the confidence of their predictions, but only considers records where the prediction confidence is greater than or equal to 0.5.\n\nThe final sorted list only contains the prediction associations where the confidence is at least 0.5 and the prediction is not `None`.", "name": "sort_by_confidence", "output_parameters": {"properties": {"output_0": {"description": "A new list of records sorted by the confidence of their predictions.", "type": "array"}}}, "parameters": {"properties": {"prediction_associations": {"description": "A list of prediction association records.", "items": {"additionalProperties": {"type": "number"}, "type": "object"}, "type": "array"}}, "required": ["prediction_associations"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Extracts the components of a step name from a string.\n\nThe input string should be in the format \"user.stepname.parameter\".\nThe function returns a dictionary with the keys \"user\", \"step\", and\n\"parameter\" and the corresponding values.", "name": "extract_step_components", "output_parameters": {"properties": {"output_0": {"description": "A dictionary with the keys \"user\", \"step\", and \"parameter\" and the\n    corresponding values.", "type": "object"}}}, "parameters": {"properties": {"input_string": {"description": "The input string in the format \"user.stepname.parameter\".", "type": "string"}}, "required": ["input_string"], "type": "object"}}, {"description": "Checks if a string contains at least one uppercase letter, one lowercase letter, and one digit.", "name": "check_string_validity", "output_parameters": {"properties": {"output_0": {"description": "True if the string contains at least one uppercase letter, one lowercase letter, and one digit.\n    False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "object"}}, "required": ["string"], "type": "object"}}, {"description": "Returns the element of `values` at the same index as the element of `keys` that is equal to `i`.\nIf `i` isn't found in `keys`, returns `None`.", "name": "by_index", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"i": {"description": "A positive integer.", "type": "integer"}, "keys": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}, "values": {"description": "A list of strings.", "items": {"type": "string"}, "type": "array"}}, "required": ["keys", "values", "i"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Calculates the mean of each coordinate's value in a list of 3D coordinates.", "name": "calculate_mean_3d_coordinates", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the mean of each coordinate's value.", "type": "array"}}}, "parameters": {"properties": {"coordinates": {"description": "A list of 3D coordinates (tuples of length 3).", "items": {"prefixItems": [{"type": "number"}, {"type": "number"}, {"type": "number"}], "type": "array"}, "type": "array"}}, "required": ["coordinates"], "type": "object"}}, {"description": "Convert a Python object to a JSON string.", "name": "python_to_json", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"obj": {"description": "A Python object to convert.", "type": "object"}}, "required": ["obj"], "type": "object"}}], "gold_answer": "{\"user\": \"user\", \"step\": \"stepname\", \"parameter\": \"parameter\"}"}
{"sample_id": "6fdb1d62-8d95-4c71-9939-7d0fe00ab074", "input": "Calculate the sum of the first n integers, where n is the closest number to 10 in the list [1, 2, 3, 4, 5].", "output": [{"name": "closest_number", "arguments": {"numbers": [1, 2, 3, 4, 5], "x": 10}, "label": "$var1"}, {"name": "sum_of_first_n_integers", "arguments": {"n": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Creates a dictionary mapping each list item to its index in the list.", "name": "map_items_to_indices", "output_parameters": {"properties": {"output_0": {"description": "A dictionary mapping each list item to its index in the list.", "type": "object"}}}, "parameters": {"properties": {"input_list": {"description": "A list of lists.", "items": {"items": {}, "type": "array"}, "type": "array"}}, "required": ["input_list"], "type": "object"}}, {"description": "Returns the number in the list that is closest to x.\nIf there are multiple such numbers, returns the one with the smallest absolute difference.", "name": "closest_number", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"numbers": {"description": "A list of numbers.", "items": {"type": ["integer", "number"]}, "type": "array"}, "x": {"description": "A number.", "type": ["integer", "number"]}}, "required": ["numbers", "x"], "type": "object"}}, {"description": "Detects and removes outliers from a NumPy array using the interquartile range (IQR) method.", "name": "detect_outliers_iqr", "output_parameters": {"properties": {"output_0": {"description": "A new NumPy array containing the original values with outliers removed.", "type": "object"}}}, "parameters": {"properties": {"data": {"description": "The input NumPy array.", "type": "object"}}, "required": ["data"], "type": "object"}}, {"description": "Merges two lists of file names based on their file extensions.", "name": "merge_lists_by_extensions", "output_parameters": {"properties": {"output_0": {"description": "A list of file names that have common extensions between the two input lists.\n    The output list only includes the file names without the extensions.", "type": "array"}}}, "parameters": {"properties": {"list1": {"description": "The first list of file names.", "items": {"type": "string"}, "type": "array"}, "list2": {"description": "The second list of file names.", "items": {"type": "string"}, "type": "array"}}, "required": ["list1", "list2"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the sum of the first n integers.", "name": "sum_of_first_n_integers", "output_parameters": {"properties": {"output_0": {"description": "The sum of the first n integers.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "A positive integer representing the number of integers to sum.", "type": ["integer", "number"]}}, "required": ["n"], "type": "object"}}, {"description": "Calculates the binary representation of a positive integer.", "name": "bit_repr", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"num": {"description": "The positive integer to be converted to binary.", "type": ["integer", "number"]}}, "required": ["num"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Converts a string to an integer or a float.", "name": "string_to_int_or_float", "output_parameters": {"properties": {"output_0": {"description": "The integer or float representation of the string.", "type": ["integer", "number"]}}}, "parameters": {"properties": {"s": {"description": "The string to convert.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Returns a list of unique (key, value) pairs from a dictionary.\n\nIf there are duplicate values in the dictionary, a ValueError is raised.", "name": "unique_values_in_dict", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"d": {"additionalProperties": {"type": "string"}, "description": "The dictionary to process.", "type": "object"}}, "required": ["d"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Returns the category of a given error code.", "name": "get_error_category", "output_parameters": {"properties": {"output_0": {"description": "The category of the error code, or None if the error code is invalid.", "type": "string"}}}, "parameters": {"properties": {"error_code": {"description": "The error code to get the category for.", "type": ["integer", "string"]}}, "required": ["error_code"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Calculates the digital root of a given number.", "name": "calculate_digital_root", "output_parameters": {"properties": {"output_0": {"description": "The digital root of the given number.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "The number to calculate the digital root of.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Calculates the sum of a list of integers, provided the minimum value is at least 0 and the maximum value is at most 255.\nIf the minimum is less than 0 or the maximum value is greater than 255, returns -1.", "name": "min_max_sum", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"integers_list": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["integers_list"], "type": "object"}}, {"description": "Extracts and manipulates data from a dictionary containing user information.", "name": "extract_and_manipulate_data", "output_parameters": {"properties": {"output_0": {"description": "A string containing the user's name, email address, and phone number,\n    concatenated into a single string. If the user's account is verified,\n    the string \"(verified)\" is appended to the end of the concatenated string.", "type": "string"}}}, "parameters": {"properties": {"user_dict": {"additionalProperties": {"type": "string"}, "description": "A dictionary containing user information.", "type": "object"}}, "required": ["user_dict"], "type": "object"}}], "gold_answer": 15}
{"sample_id": "0cea3214-8bbb-443a-943e-de9038f8b5f9", "input": "Repeat the string 'hello' 3 times, then convert the resulting string to the opposite case.", "output": [{"name": "repeat_str", "arguments": {"n": 3, "string": "hello"}, "label": "$var1"}, {"name": "convert_to_opposite_case", "arguments": {"text": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Returns a string formatted with the values of x and y.", "name": "x_and_y", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"x": {"description": "The value of x.", "type": ["integer", "number"]}, "y": {"description": "The value of y.", "type": ["integer", "number"]}}, "required": ["x", "y"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Formats a string by replacing placeholders with their corresponding values from a dictionary.", "name": "str_format_named_params", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"params": {"additionalProperties": {"type": "string"}, "description": "A dictionary of placeholder names and their corresponding values.", "type": "object"}, "string": {"description": "The string to format.", "type": "string"}}, "required": ["string", "params"], "type": "object"}}, {"description": "Finds the indices of the maximum value in every dimension of a 3D array.", "name": "find_max_indices", "output_parameters": {"properties": {"output_0": {"description": "A tuple of indices of the maximum value in every dimension of `data`.", "type": "object"}}}, "parameters": {"properties": {"data": {"description": "A 3D array of size (M, N, O), where M is the number of y-coordinates, N is the number of x-coordinates, and O is the number of z-coordinates. The three dimensions correspond to the three coordinates.", "type": "object"}}, "required": ["data"], "type": "object"}}, {"description": "Converts a string to the opposite case.", "name": "convert_to_opposite_case", "output_parameters": {"properties": {"output_0": {"description": "The input string with all lower-case characters replaced by their upper-case counterparts and vice-versa.", "type": "object"}}}, "parameters": {"properties": {"text": {"description": "The input string.", "type": "object"}}, "required": ["text"], "type": "object"}}, {"description": "Returns a new string with n copies of the original string.", "name": "repeat_str", "output_parameters": {"properties": {"output_0": {"description": "", "type": "string"}}}, "parameters": {"properties": {"n": {"description": "The number of times to repeat the string.", "nullable": true, "type": "integer"}, "string": {"description": "The string to repeat.", "type": "string"}}, "required": ["n", "string"], "type": "object"}}, {"description": "Sorts a list of integers without duplicates.", "name": "sort_unique_integers", "output_parameters": {"properties": {"output_0": {"description": "A list of unique integers in sorted order.", "type": "array"}}}, "parameters": {"properties": {"integers": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["integers"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Counts the number of overall labels, the number of positive labels, and the number of negative labels in the given set.", "name": "count_labels", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing the total number of labels, the number of positive labels, and the number of negative labels.", "type": "object"}}}, "parameters": {"properties": {"labels": {"description": "A list of labels. The labels are either 0 or 1.", "items": {"type": "integer"}, "type": "array"}}, "required": ["labels"], "type": "object"}}, {"description": "Returns a list of all ancestor dictionaries of the dictionaries with a `visited` key set to `True`.", "name": "get_visited_ancestors", "output_parameters": {"properties": {"output_0": {"description": "A list of ancestor dictionaries.", "type": "array"}}}, "parameters": {"properties": {"node": {"description": "A dictionary containing a key called `children` that holds a list of child dictionaries.", "type": "object"}}, "required": ["node"], "type": "object"}}, {"description": "Encodes a string to the required format for sending as part of a URL query string.", "name": "url_encode", "output_parameters": {"properties": {"output_0": {"description": "The encoded string.", "type": "string"}}}, "parameters": {"properties": {"string": {"description": "The string to be encoded.", "type": "string"}}, "required": ["string"], "type": "object"}}], "gold_answer": "HELLOHELLOHELLO"}
{"sample_id": "f9ebc5c7-fafb-4b4b-ae3f-8f4f10f5ca31", "input": "A square is drawn inside a right-angled triangle with the two perpendicular sides as 12 cm and 8 cm. what is the side of the largest possible square that can be drawn?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 12, "arg_1": 8}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 2}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 10}}], "tools": [{"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "floor", "description": "Return the largest integer less than or equal to x.", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the flooring result", "type": "int"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "circumface", "description": "Calculate the circumference of a circle", "parameters": {"arg_0": {"description": "Radius of the circle", "type": "float"}}, "output_parameter": {"result": {"description": "Circumference of the circle", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "log", "description": "Calculate the logarithm of x with the given base (default is natural log)", "parameters": {"arg_0": {"description": "The input number", "type": "int or float"}, "arg_1": {"description": "The base", "type": "int or float"}}, "output_parameter": {"result": {"description": "logarithm of provided number with the given base ", "type": "int"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}], "gold_answer": 4.8}
{"sample_id": "79d16f97-e67f-47c0-b478-5a7ee176c849", "input": "Of the 55 cars on a car lot, 40 have air-conditioning, 25 have power windows, and 12 have both air-conditioning and power windows. How many of the cars on the lot have neither air-conditioning nor power windows?", "output": [{"name": "add", "label": "$var_1", "arguments": {"arg_0": 40, "arg_1": 25}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 12}}, {"name": "subtract", "label": "$var_3", "arguments": {"arg_0": 55, "arg_1": "$var_2.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "permutation", "description": "Calculate the number of permutations of n items taken r at a time", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being arranged", "type": "int"}}, "output_parameter": {"result": {"description": "Number of permutations", "type": "int"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "square_edge_by_area", "description": "Calculate the edge length of a square given its area", "parameters": {"arg_0": {"description": "Area of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "surface_sphere", "description": "Calculate the surface area of a sphere", "parameters": {"arg_0": {"description": "Radius of the sphere", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the sphere", "type": "float"}}}], "gold_answer": 2.0}
{"sample_id": "d22678f7-c04c-48a6-8556-fb2d314dfb3b", "input": "john has $ 1600 at the beginning of his trip , after spending money , he still has exactly $ 600 less than he spent on the trip . how much money does john still have ?", "output": [{"name": "subtract", "label": "$var_1", "arguments": {"arg_0": 1600, "arg_1": 600}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 2}}], "tools": [{"name": "choose", "description": "Calculate the number of ways to choose r items from n items without repetition and without order", "parameters": {"arg_0": {"description": "Total number of items", "type": "int"}, "arg_1": {"description": "Number of items being chosen", "type": "int"}}, "output_parameter": {"result": {"description": "Number of combinations", "type": "int"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}, {"name": "min_number", "description": "Find the minimum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Minimum value", "type": "float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "circumface", "description": "Calculate the circumference of a circle", "parameters": {"arg_0": {"description": "Radius of the circle", "type": "float"}}, "output_parameter": {"result": {"description": "Circumference of the circle", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 500.0}
{"sample_id": "559cf4fa-04a5-4752-b2d0-b3602c75c413", "input": "Given a list of numbers [1, 2, 3, 4, 5], calculate the sample variance and then validate if the result is greater than zero.", "output": [{"name": "sample_variance", "arguments": {"sample": [1, 2, 3, 4, 5]}, "label": "$var1"}, {"name": "validate_element", "arguments": {"num": "$var1.output_0$"}, "label": "$var2"}], "tools": [{"description": "Removes the first and last characters of a string if it has at least three characters.", "name": "remove_first_and_last_char", "output_parameters": {"properties": {"output_0": {"description": "The string obtained by removing the first and last characters of `s` if `s` has at least three characters.\n    If `s` has less than three characters, returns an empty string.", "type": "string"}}}, "parameters": {"properties": {"s": {"description": "The input string.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Creates a matrix of size (10, 10) where the element at index [i, j] is the sum of d['x'][i] and d['y'][j].", "name": "dict_sum_matrix", "output_parameters": {"properties": {"output_0": {"description": "A matrix of size (10, 10) containing the sum of d['x'][i] and d['y'][j].", "type": "array"}}}, "parameters": {"properties": {"d": {"additionalProperties": {"items": {"type": "number"}, "type": "array"}, "description": "A dictionary with keys 'x' and 'y' that map to lists of length 10.", "type": "object"}}, "required": ["d"], "type": "object"}}, {"description": "Validates a number by checking if it is greater than zero.", "name": "validate_element", "output_parameters": {"properties": {"output_0": {"description": "True if the number is valid, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"num": {"description": "The number to validate.", "type": "number"}}, "required": ["num"], "type": "object"}}, {"description": "Calculates the sample variance of a series of numbers.", "name": "sample_variance", "output_parameters": {"properties": {"output_0": {"description": "The sample variance of the input list.", "type": "number"}}}, "parameters": {"properties": {"sample": {"description": "A list of numbers.", "items": {"type": "number"}, "type": "array"}}, "required": ["sample"], "type": "object"}}, {"description": "Calculates the result of `n` to the power of `p` modulo 10^9 + 7.", "name": "power_modulo", "output_parameters": {"properties": {"output_0": {"description": "The result of `n` to the power of `p` modulo 10^9 + 7.", "type": "integer"}}}, "parameters": {"properties": {"n": {"description": "A positive integer.", "type": "integer"}, "p": {"description": "A positive integer.", "type": "integer"}}, "required": ["n", "p"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Establishes a connection to the given TCP socket address and returns a boolean value indicating whether the connection is successful.", "name": "isConnected", "output_parameters": {"properties": {"output_0": {"description": "True if the connection is successful, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"address": {"description": "A tuple containing the host name and port number of the TCP socket address.", "type": "object"}}, "required": ["address"], "type": "object"}}, {"description": "Pads an input array with the maximum value along the H dimension.\nThe padded array has the same width as the input array and a height that is a power of 2.", "name": "pad_with_max_value", "output_parameters": {"properties": {"output_0": {"description": "The padded array.", "type": "object"}}}, "parameters": {"properties": {"input_array": {"description": "The input array of size (H, W).", "type": "object"}}, "required": ["input_array"], "type": "object"}}, {"description": "Finds the first available port in a given range using the socket programming library.", "name": "find_first_available_port", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"end": {"description": "The ending port number.", "type": "integer"}, "start": {"description": "The starting port number.", "type": "integer"}}, "required": ["start", "end"], "type": "object"}}, {"description": "Returns a tuple of the parent node and the child node in a string with forward slash separators.", "name": "get_parent_child", "output_parameters": {"properties": {"output_0": {"description": "A tuple of the parent node and the child node.", "type": "array"}}}, "parameters": {"properties": {"path": {"description": "The input string with forward slash separators.", "type": "string"}}, "required": ["path"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Processes a list of student records and returns a new list of dictionaries containing the name and the number of assignments completed.", "name": "process_students", "output_parameters": {"properties": {"output_0": {"description": "A new list of dictionaries containing the name and the number of assignments completed.", "type": "array"}}}, "parameters": {"properties": {"records": {"description": "A list of student records. Each record is a dictionary containing the student's name and the number of assignments completed.", "items": {"additionalProperties": {"type": "object"}, "type": "object"}, "type": "array"}}, "required": ["records"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Returns the hash that contains the key \"id\" with the largest value.", "name": "get_hash_with_largest_id", "output_parameters": {"properties": {"output_0": {"description": "The hash with the largest \"id\" value, or None if the input list is empty.", "type": "object"}}}, "parameters": {"properties": {"hashes": {"description": "A list of hashes (dictionaries).", "items": {"additionalProperties": {}, "type": "object"}, "type": "array"}}, "required": ["hashes"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}], "gold_answer": true}
{"sample_id": "e67ab11d-70f4-4d75-9cf4-dc77d18dda1f", "input": "I have two numbers 5 and 10. I want to find their sum. Then, I want to generate a function that increments a non-negative integer by an offset. I will use this function to increment the sum by an offset. Finally, I want to check whether the output of the function is string-like.", "output": [{"name": "sum_total", "arguments": {"a": 5, "b": 10}, "label": "$var1"}, {"name": "generate_function", "arguments": {"num": "$var1.output_0$"}, "label": "$var2"}, {"name": "is_string_like", "arguments": {"obj": "$var2.output_0$"}, "label": "$var3"}], "tools": [{"description": "Calculates the sum of two numbers.", "name": "sum_total", "output_parameters": {"properties": {"output_0": {"description": "The sum of `a` and `b`.", "type": ["integer", "number"]}}}, "parameters": {"properties": {"a": {"description": "The first number.", "type": ["integer", "number"]}, "b": {"description": "The second number.", "type": ["integer", "number"]}}, "required": ["a", "b"], "type": "object"}}, {"description": "Calculates the sha1 hash of a file's contents.", "name": "get_file_sha1", "output_parameters": {"properties": {"output_0": {"description": "The sha1 hash of the file's contents.", "type": "string"}}}, "parameters": {"properties": {"file_path": {"description": "The path to the file.", "type": "string"}}, "required": ["file_path"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Converts a number to its binary representation.", "name": "to_binary", "output_parameters": {"properties": {"output_0": {"description": "The binary representation of the number as a string.", "type": "string"}}}, "parameters": {"properties": {"num": {"description": "The number to be converted.", "type": "integer"}}, "required": ["num"], "type": "object"}}, {"description": "Generates a function that increments a non-negative integer by an offset.\n\nThe offset starts at 1 and increases by 1 for each consecutive call.\nIf the input is 0, the function returns None.", "name": "generate_function", "output_parameters": {"properties": {"output_0": {"description": "The input integer incremented by the offset, or None if the input is 0.", "type": "integer"}}}, "parameters": {"properties": {"num": {"description": "A non-negative integer.", "type": "integer"}}, "required": ["num"], "type": "object"}}, {"description": "Computes the reciprocal of a tensor.", "name": "y", "output_parameters": {"properties": {"output_0": {"description": "The reciprocal of the input tensor.", "type": "object"}}}, "parameters": {"properties": {"x": {"description": "The input tensor.", "type": "object"}}, "required": ["x"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Sorts a list of strings based on the first digit in each string.\n\nIf the first digit of a string is not a valid integer, it is treated as if it were 0.\nIf the first digit of multiple strings is the same, the strings are sorted alphabetically.", "name": "sort_by_first_digit", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"string_list": {"description": "A list of strings to be sorted.", "items": {"type": "string"}, "type": "array"}}, "required": ["string_list"], "type": "object"}}, {"description": "Generates a Markdown-formatted unordered list from a list of strings.", "name": "generate_markdown_unordered_list", "output_parameters": {"properties": {"output_0": {"description": "A string containing the Markdown-formatted unordered list.", "type": "string"}}}, "parameters": {"properties": {"items": {"description": "A list of strings to be formatted as a Markdown unordered list.", "items": {"type": "string"}, "type": "array"}}, "required": ["items"], "type": "object"}}, {"description": "Calculates the square root of a number using Newton's method.", "name": "sqrt_newton", "output_parameters": {"properties": {"output_0": {"description": "The square root of `x`.", "type": "number"}}}, "parameters": {"properties": {"x": {"description": "The number to calculate the square root of.", "type": ["integer", "number"]}}, "required": ["x"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Filters a list of users by their age and returns a list of strings containing their name and age category.", "name": "filter_users_by_age", "output_parameters": {"properties": {"output_0": {"description": "A list of strings containing the user's name and age category.", "type": "array"}}}, "parameters": {"properties": {"users": {"description": "A list of User objects.", "items": {"type": "object"}, "type": "array"}}, "required": ["users"], "type": "object"}}, {"description": "Filters out rows and columns from a list of data frames where the value of the `target` column matches the `target_value` string.", "name": "filter_dataframes", "output_parameters": {"properties": {"output_0": {"description": "A list of filtered data frames.", "type": "array"}}}, "parameters": {"properties": {"dataframes": {"description": "A list of dictionaries representing data frames.", "items": {"type": "object"}, "type": "array"}, "target_value": {"description": "The target value to filter out.", "type": "string"}}, "required": ["dataframes", "target_value"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Checks whether an object is string-like.", "name": "is_string_like", "output_parameters": {"properties": {"output_0": {"description": "True if `obj` is a string or any object that implements the `__str__()` method. Otherwise, False.", "type": "boolean"}}}, "parameters": {"properties": {"obj": {"description": "The object to check."}}, "required": ["obj"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Reads a JSON file and returns a dictionary where the keys are the keywords and the values are the associated counts.", "name": "count_keywords", "output_parameters": {"properties": {"output_0": {"description": "A dictionary where the keys are the keywords and the values are the associated counts.", "type": "object"}}}, "parameters": {"properties": {"json_file": {"description": "The path to the JSON file.", "type": "string"}}, "required": ["json_file"], "type": "object"}}], "gold_answer": true}
{"sample_id": "c228231e-87e4-47ab-8b32-cdef5083a80b", "input": "20 men do a work in 20days. How many men are needed to finish the work in 10days?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 20, "arg_1": 20}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 10}}], "tools": [{"name": "volume_cone", "description": "Calculate the volume of a cone", "parameters": {"arg_0": {"description": "Radius of the base of the cone", "type": "float"}, "arg_1": {"description": "Height of the cone", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cone", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "speed", "description": "Calculate speed given distance and time.", "parameters": {"arg_0": {"description": "distance", "type": "int or float"}, "arg_1": {"description": "time", "type": "int or float"}}, "output_parameter": {"result": {"description": "the speed", "type": "int or float"}}}], "gold_answer": 40.0}
{"sample_id": "38e7c22f-c209-4f49-8bbd-08bc3cb08203", "input": "If 2^2n + 2^2n + 2^2n + 2^2n = 4^20, then n =", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 20, "arg_1": 2}}, {"name": "subtract", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 2}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 2}}], "tools": [{"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "reminder", "description": "Calculate the remainder of a divided by b", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "the remainder", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "rhombus_area", "description": "Calculate the area of a rhombus", "parameters": {"arg_0": {"description": "Length of the first diagonal", "type": "float"}, "arg_1": {"description": "Length of the second diagonal", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the rhombus", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "factorial", "description": " Calculate the factorial of a non-negative integer", "parameters": {"arg_0": {"description": "The input number", "type": "int"}}, "output_parameter": {"result": {"description": "the factorial result", "type": "int"}}}, {"name": "square_perimeter", "description": "Calculate the perimeter of a square given its side length", "parameters": {"arg_0": {"description": "side length", "type": "int or float"}}, "output_parameter": {"result": {"description": "the square perimeter", "type": "int or float"}}}], "gold_answer": 19.0}
{"sample_id": "f61f6ae5-83ab-4807-87f6-30f20df4c8ff", "input": "The cost of 10 kg of mangos is equal to the cost of 24 kg of rice. The cost of 6 kg of flour equals the cost of 2 kg of rice. The cost of each kg of flour is $25. Find the total cost of 4 kg of mangos, 3 kg of rice and 5 kg of flour?", "output": [{"name": "divide", "label": "$var_1", "arguments": {"arg_0": 24, "arg_1": 10}}, {"name": "multiply", "label": "$var_2", "arguments": {"arg_0": 25, "arg_1": 6}}, {"name": "divide", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 2}}, {"name": "multiply", "label": "$var_4", "arguments": {"arg_0": "$var_1.result$", "arg_1": "$var_3.result$"}}, {"name": "multiply", "label": "$var_5", "arguments": {"arg_0": 4, "arg_1": "$var_4.result$"}}, {"name": "multiply", "label": "$var_6", "arguments": {"arg_0": 25, "arg_1": 6}}, {"name": "divide", "label": "$var_7", "arguments": {"arg_0": "$var_6.result$", "arg_1": 2}}, {"name": "multiply", "label": "$var_8", "arguments": {"arg_0": 3, "arg_1": "$var_7.result$"}}, {"name": "add", "label": "$var_9", "arguments": {"arg_0": "$var_5.result$", "arg_1": "$var_8.result$"}}, {"name": "multiply", "label": "$var_10", "arguments": {"arg_0": 5, "arg_1": 25}}, {"name": "add", "label": "$var_11", "arguments": {"arg_0": "$var_9.result$", "arg_1": "$var_10.result$"}}], "tools": [{"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "triangle_area", "description": "Calculate the area of a triangle given base and height", "parameters": {"arg_0": {"description": "Length of the base of the triangle", "type": "float"}, "arg_1": {"description": "Height of the triangle", "type": "float"}}, "output_parameter": {"result": {"description": "Area of the triangle", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "surface_cylinder", "description": "Calculate the surface area of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Surface area of the cylinder", "type": "float"}}}, {"name": "gcd", "description": "calculate the Greatest Common Divisor (GCD) of two numbers", "parameters": {"arg_0": {"description": "first number", "type": "int or float"}, "arg_1": {"description": "second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "Greatest Common Divisor", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "volume_cylinder", "description": "Calculate the volume of a cylinder", "parameters": {"arg_0": {"description": "Radius of the base of the cylinder", "type": "float"}, "arg_1": {"description": "Height of the cylinder", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cylinder", "type": "float"}}}], "gold_answer": 1070.0}
{"sample_id": "160cac0b-0e2d-4519-b36a-dff0af06eb2b", "input": "a man has $ 480 in the denominations of one - dollar , 5 - dollar notes and 10 - dollar . the number of dollars of each denomination is equal . what is the total number of dollar that he has ?", "output": [{"name": "multiply", "label": "$var_1", "arguments": {"arg_0": 480, "arg_1": 10}}, {"name": "divide", "label": "$var_2", "arguments": {"arg_0": "$var_1.result$", "arg_1": 60}}, {"name": "add", "label": "$var_3", "arguments": {"arg_0": "$var_2.result$", "arg_1": 10}}], "tools": [{"name": "square_edge_by_perimeter", "description": "Calculate the edge length of a square given its perimeter", "parameters": {"arg_0": {"description": "Perimeter of the square", "type": "float"}}, "output_parameter": {"result": {"description": "Edge length of the square", "type": "float"}}}, {"name": "divide", "description": "divides two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The division result", "type": "int or float"}}}, {"name": "negate_prob", "description": "Calculate the probability of an event not occurring", "parameters": {"arg_0": {"description": "Probability of the event occurring", "type": "float"}}, "output_parameter": {"result": {"description": "Probability of the event not occurring", "type": "float"}}}, {"name": "add", "description": "adds two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The addition result", "type": "int or float"}}}, {"name": "volume_cube", "description": "Calculate the volume of a cube", "parameters": {"arg_0": {"description": "Length of a side of the cube", "type": "float"}}, "output_parameter": {"result": {"description": "Volume of the cube", "type": "float"}}}, {"name": "multiply", "description": "Multiplies two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The multiplication result", "type": "int or float"}}}, {"name": "subtract", "description": "subtract two numbers", "parameters": {"arg_0": {"description": "The first number", "type": "int or float"}, "arg_1": {"description": "The second number", "type": "int or float"}}, "output_parameter": {"result": {"description": "The subtraction result", "type": "int or float"}}}, {"name": "max_number", "description": "Find the maximum value among the given numbers", "parameters": {"arg_0": {"description": "A list of numbers", "type": "list of float"}}, "output_parameter": {"result": {"description": "Maximum value", "type": "float"}}}, {"name": "inverse", "description": "Return the inverse (reciprocal) of a number", "parameters": {"arg_0": {"description": "The number to inverse", "type": "int or float"}}, "output_parameter": {"result": {"description": "The inverse result", "type": "int or float"}}}], "gold_answer": 90.0}
{"sample_id": "411ad462-eed5-410a-b379-32870510f7ba", "input": "Find all the numbers that divide 100 without a remainder. Then, perform a linear search to find the index of 2 in the list of divisors.", "output": [{"name": "divide_without_remainder", "arguments": {"n": 100}, "label": "$var1"}, {"name": "linear_search", "arguments": {"arr": "$var1.output_0$", "target": 2}, "label": "$var2"}], "tools": [{"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}, {"description": "Determines if all the bits in a 32-bit integer are set to 1.", "name": "are_all_bits_set", "output_parameters": {"properties": {"output_0": {"description": "True if all the bits are set to 1, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"num": {"description": "The 32-bit integer to check.", "type": ["integer", "number"]}}, "required": ["num"], "type": "object"}}, {"description": "Calculates the absolute sum of two numbers based on their signs.", "name": "absolute_sum", "output_parameters": {"properties": {"output_0": {"description": "", "type": ["integer", "number"]}}}, "parameters": {"properties": {"a": {"description": "The first number.", "type": ["integer", "number"]}, "b": {"description": "The second number.", "type": ["integer", "number"]}}, "required": ["a", "b"], "type": "object"}}, {"description": "Replaces empty/blank values in a dictionary with None.", "name": "replace_empty_values", "output_parameters": {"properties": {"output_0": {"description": "A new dictionary with empty/blank values replaced with None.", "type": "object"}}}, "parameters": {"properties": {"dictionary": {"additionalProperties": {}, "description": "The dictionary to filter.", "type": "object"}}, "required": ["dictionary"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Performs a linear search to find the index of a target value in an unsorted array.\nIf the value is not found in the array, returns -1.", "name": "linear_search", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"arr": {"description": "The array to search.", "items": {"type": ["integer", "number"]}, "type": "array"}, "target": {"description": "The target value to find.", "type": ["integer", "number"]}}, "required": ["arr", "target"], "type": "object"}}, {"description": "Finds all the numbers that divide a given number without a remainder.", "name": "divide_without_remainder", "output_parameters": {"properties": {"output_0": {"description": "A list of all the numbers that divide the given number without a remainder.", "type": "array"}}}, "parameters": {"properties": {"n": {"description": "The number to find divisors for.", "type": "integer"}}, "required": ["n"], "type": "object"}}, {"description": "Finds all possible prefixes of the input string.", "name": "find_prefixes", "output_parameters": {"properties": {"output_0": {"description": "A list of all possible prefixes of the input string.", "type": "array"}}}, "parameters": {"properties": {"text": {"description": "The input string.", "type": "string"}}, "required": ["text"], "type": "object"}}, {"description": "Checks if the value of the given variable is a string.", "name": "is_string_value", "output_parameters": {"properties": {"output_0": {"description": "True if the value of the variable is a string, False otherwise.", "type": "boolean"}}}, "parameters": {"properties": {"variable_name": {"description": "The name of the variable to check.", "type": "string"}}, "required": ["variable_name"], "type": "object"}}, {"description": "Gets all attributes from a Python object that match a specific namespace.", "name": "get_attributes_by_namespace", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"namespace": {"description": "The namespace string to match attributes against.", "type": "string"}, "obj": {"description": "The object to get attributes from."}}, "required": ["obj", "namespace"], "type": "object"}}, {"description": "Computes the SHA256 hash of a file at a given path by concatenating its contents with the string representation of the provided metadata dictionary.\nThe function encodes the file contents and metadata as UTF-8 strings before hashing.", "name": "hash_metadata", "output_parameters": {"properties": {"output_0": {"description": "The hexadecimal representation of the SHA256 hash.", "type": "string"}}}, "parameters": {"properties": {"file_path": {"description": "The path to the file.", "type": "string"}, "metadata": {"description": "The metadata dictionary.", "type": "object"}}, "required": ["file_path", "metadata"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Reads a file 'files.txt' and returns a list of strings with no subdirectories.", "name": "list_files_without_subdirectories", "output_parameters": {"properties": {"output_0": {"description": "A list of strings with no subdirectories.", "type": "array"}}}, "parameters": {"properties": {}, "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Returns a new dictionary containing only the keys that are present in both dictionaries.", "name": "dictionary_intersection", "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}, "parameters": {"properties": {"d1": {"additionalProperties": {"type": "integer"}, "description": "The first dictionary.", "type": "object"}, "d2": {"additionalProperties": {"type": "integer"}, "description": "The second dictionary.", "type": "object"}}, "required": ["d1", "d2"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}], "gold_answer": 1}
{"sample_id": "31140711-d426-4a53-8744-6da34e7122b8", "input": "Calculate the sum of 5 and 7, then calculate the number of increments from 1 to the sum with an increment of 2.", "output": [{"name": "sum_func", "arguments": {"x": 5, "y": 7}, "label": "$var1"}, {"name": "count_increments", "arguments": {"start": 1, "end": "$var1.output_0$", "increment": 2}, "label": "$var2"}], "tools": [{"description": "Returns a string with a f-string containing a value that is either 100 or 500, depending on whether the `is_special` parameter is `True` or `False`.", "name": "generate_fstring", "output_parameters": {"properties": {"output_0": {"description": "A string with a f-string containing a value that is either 100 or 500, depending on whether the `is_special` parameter is `True` or `False`.", "type": "string"}}}, "parameters": {"properties": {"is_special": {"description": "A boolean value that determines the value of the f-string.", "type": "boolean"}}, "required": ["is_special"], "type": "object"}}, {"description": "Counts the words in a list of sentences.", "name": "count_words_from_sentences", "output_parameters": {"properties": {"output_0": {"description": "A dictionary of words and their corresponding counts.", "type": "object"}}}, "parameters": {"properties": {"sentences": {"description": "A list of sentences.", "items": {"type": "string"}, "type": "array"}}, "required": ["sentences"], "type": "object"}}, {"description": "Finds users in the given graph who have the given name in their name.", "name": "find_users", "output_parameters": {"properties": {"output_0": {"description": "A dictionary where the keys are the users who have the given name in\n    their name and the values are the list of friends for each user.", "type": "object"}}}, "parameters": {"properties": {"graph": {"additionalProperties": {"items": {"type": "string"}, "type": "array"}, "description": "A dictionary representing the graph of a user's social network. Each key represents a user and the corresponding value is a list of the user's friends.", "type": "object"}, "name": {"description": "A string to search for in the user's name.", "type": "string"}}, "required": ["graph", "name"], "type": "object"}}, {"description": "Calculates the saliency ratio for a given time series.", "name": "ratio_saliency", "output_parameters": {"properties": {"output_0": {"description": "A list of floats representing the saliency ratios.", "type": "array"}}}, "parameters": {"properties": {"time_series": {"description": "A list of integers representing the time series.", "items": {"type": "integer"}, "type": "array"}}, "required": ["time_series"], "type": "object"}}, {"description": "Returns True if either of the two boolean values is True but not both are True at the same time.", "name": "skip_if_both_true", "output_parameters": {"properties": {"output_0": {"description": "", "type": "boolean"}}}, "parameters": {"properties": {"a": {"description": "The first boolean value.", "type": "boolean"}, "b": {"description": "The second boolean value.", "type": "boolean"}}, "required": ["a", "b"], "type": "object"}}, {"description": "Splits a list of integers into two sorted groups based on whether the numbers are even or odd.", "name": "split_integers", "output_parameters": {"properties": {"output_0": {"description": "A tuple containing two lists. The first list contains the even numbers, and the second list contains the odd numbers.", "type": "array"}}}, "parameters": {"properties": {"numbers": {"description": "A list of integers.", "items": {"type": "integer"}, "type": "array"}}, "required": ["numbers"], "type": "object"}}, {"description": "Returns a list of non-empty substrings that do not contain any whitespace characters.", "name": "non_whitespace_substrings", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"input_str": {"description": "A string containing multiple words separated by whitespace characters.", "type": "string"}}, "required": ["input_str"], "type": "object"}}, {"description": "Counts the occurrences of each character in a string and returns a string with the format `{char}={count}`.", "name": "count_characters", "output_parameters": {"properties": {"output_0": {"description": "A string containing the number of occurrences of each character in `s`.", "type": "string"}}}, "parameters": {"properties": {"s": {"description": "The input string.", "type": "string"}}, "required": ["s"], "type": "object"}}, {"description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.", "name": "parse_list_of_numbers", "output_parameters": {"properties": {"output_0": {"description": "A list of floats.", "type": "array"}}}, "parameters": {"properties": {"string": {"description": "The input string.", "type": "string"}}, "required": ["string"], "type": "object"}}, {"description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.", "name": "traverse_diagonal", "output_parameters": {"properties": {"output_0": {"description": "A list of the diagonal elements.", "type": "array"}}}, "parameters": {"properties": {"matrix": {"description": "A square matrix represented as a list of lists.", "items": {"items": {"type": "integer"}, "type": "array"}, "type": "array"}}, "required": ["matrix"], "type": "object"}}, {"description": "Generates all possible n-grams (subsequences of length `n`) from `sequence`.", "name": "generate_ngrams", "output_parameters": {"properties": {"output_0": {"description": "A list of n-grams.", "type": "array"}}}, "parameters": {"properties": {"n": {"description": "The length of the n-grams.", "type": "integer"}, "sequence": {"description": "The input sequence.", "items": {"type": "integer"}, "type": "array"}}, "required": ["sequence", "n"], "type": "object"}}, {"description": "Executes an SQL query against a database and returns the results as a list of tuples.\nHandles any exceptions and returns an empty list when a sqlite3.Error is encountered.", "name": "execute_sql", "output_parameters": {"properties": {"output_0": {"description": "", "type": "array"}}}, "parameters": {"properties": {"db": {"description": "A database connection object.", "type": "object"}, "sql": {"description": "A string representing an SQL query.", "type": "string"}}, "required": ["sql", "db"], "type": "object"}}, {"description": "Calculates the sum of two numbers `x` and `y`, ensuring the result is at least `x + y` in value and is 0 when `x + y` is less than 1.", "name": "sum_func", "output_parameters": {"properties": {"output_0": {"description": "The sum of the two numbers, ensuring the result is at least `x + y` in value and is 0 when `x + y` is less than 1.", "type": "number"}}}, "parameters": {"properties": {"x": {"description": "The first number.", "type": "number"}, "y": {"description": "The second number.", "type": "number"}}, "required": ["x", "y"], "type": "object"}}, {"description": "Calculates the number of increments in the range from start to end inclusive, with the provided increment.", "name": "count_increments", "output_parameters": {"properties": {"output_0": {"description": "The number of increments in the range.", "type": "integer"}}}, "parameters": {"properties": {"end": {"description": "The ending value of the range.", "type": "integer"}, "increment": {"description": "The increment value.", "type": "integer"}, "start": {"description": "The starting value of the range.", "type": "integer"}}, "required": ["start", "end", "increment"], "type": "object"}}, {"description": "Converts a Unix timestamp to a date string in the format \"YYYY-MM-DD\".", "name": "convert_timestamp", "output_parameters": {"properties": {"output_0": {"description": "A date string in the format \"YYYY-MM-DD\".", "type": "string"}}}, "parameters": {"properties": {"timestamp": {"description": "A Unix timestamp representing a specific point in time.", "type": "integer"}}, "required": ["timestamp"], "type": "object"}}, {"description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).", "name": "compute_degree", "output_parameters": {"properties": {"output_0": {"description": "", "type": "integer"}}}, "parameters": {"properties": {"coefficients": {"description": "The coefficients of the polynomial in decreasing order of powers.", "items": {"type": "number"}, "type": "array"}}, "required": ["coefficients"], "type": "object"}}], "gold_answer": 6}